### YamlMime:Tutorial
title: Dize ilişkilendirme, biçimlendirilmiş dizeler oluşturmak için kullanın
metadata:
  title: Dize ilişkilendirme - C# etkileşimli öğretici
  description: Bu öğreticide, C# dize ilişkilendirme özelliğinden etkileşimli olarak keşfetmek için tarayıcınızı kullanın. C# kodu yazacak ve derleme ve kodunuzu doğrudan tarayıcınızda çalıştırmaya sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70d63f460ad2e67fe60cd8d5130e8ff22889d8be
  ms.sourcegitcommit: 96543603ae29bc05cecccb8667974d058af63b4a
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/24/2019
  ms.locfileid: "66195945"
items:
- durationInMinutes: 2
  content: >
    Bu öğreticide nasıl kullanacağınızı öğretir [dize ilişkilendirme](../../language-reference/tokens/interpolated.md) değerleri tek bir dize olarak eklenecek. Ayrıca metin Sonuç dizesini formatlamayı kontrol öğrenin. Yazmak ve çalıştırmak için tarayıcınızı kullanırsınız C# kod ve sonuçları hemen görebilirsiniz.
- title: İlişkilendirilmiş dize oluşturma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Bunu yapmak için kod etkileşimli pencereye yazın (Değiştir `<name>` adınızla) seçip **çalıştırmak**:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Kod çalıştırdığınızda **çıkış** karşılamada adınızı içeren bir dize görüntüler. Dize bağımsız değişkeni <xref:System.Console.WriteLine%2A> yöntem çağrısında bir *ilişkilendirilmiş dize ifadesi*. Tek bir dize olanak sağlayan bir şablon türüdür (adlı *sonuç dizesi*), gömülü kod içeren bir dizeden. İlişkilendirilmiş dize ifadeleri bir dizeye değer eklerken veya birkaç dizeleri birleştirme (bir araya getirme) için özellikle yararlıdır.


    Yukarıdaki örnek her ilişkilendirilmiş dize ifadesi olmalıdır iki öğeleri içerir:


    - İle başlayan bir dize sabit değeri `$` açma tırnak işareti karakterinden önce karakter karakter. Arasında boşluk olamaz `$` sembol ve tırnak işareti karakteri. (Görmek istiyorsanız, ne olacağını yaptığınızda, sonra boşluk Ekle `$` karakter etkileşimli pencerede ve güncelleştirilmiş kod çalıştırın. C# derleyicisi şeklinde hata verir "Beklenmeyen karakter '$'".)


    - Bir veya daha fazla *ilişkilendirme ifadeleri*. Bir ilişkilendirme ifade bir açma ve kapatma ayracı gösterilir (`{` ve `}`). Bir değer döndüren bir C# ifadesini ekleyebilirsiniz (dahil olmak üzere `null`) küme ayraçları içinde.


    Diğer veri türlerinden bazılarıyla birkaç daha fazla dize ilişkilendirme örneği deneyelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi Önizleme modundadır. Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).
- title: Farklı veri türleri ekleme
  durationInMinutes: 5
  content: "Önceki adımda, bir dizenin içine eklemek için dize ilişkilendirme kullanılır. İlişkilendirilmiş dize ifadesi bir parçası olan her bir ilişkilendirme ifade herhangi bir veri türünde ancak olabilir. Şimdi bir aradeğerlendirme dizesinde çeşitli veri türü ifadeleri değerlerini içerir.\n\nAşağıdaki örnekte, ilk tanımlarız bir [demet](../../tuples.md) olan `Name`, `Price`, ve `perPackage` üyeleri. Etkileşimli pencerede aşağıdaki kodu çalıştırın:\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\nUnutmayın ilişkilendirme ifade `item.Price` aradeğerlendirme dizesinde çözümleniyor sonuç dizesindeki \"1.99\" metni. Deyim sonucu türü dize olmadığı durumlarda, sonuç şu şekilde bir dizeye çözümlenir çünkü:\n\n- İlişkilendirme ifade değerlendirilirse `null`, boş bir dize (\"\", veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.\n\n- İlişkilendirme ifade değerlendirme değil, `null`, genellikle `ToString` sonuç ifadesi yöntemi çağrılır. \n\nBu örnek çıktıda, (eggplant fiyatı, her saniye değişmez) kesin tarih ve Fiyat değerini para birimi göstermez. Sonraki adımda, ifade sonuçları dize temsillerini biçimini denetleyerek bu sorunları gidermek nasıl öğreneceksiniz.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama deneyimi Önizleme modundadır. Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).\n"
- title: İlişkilendirme ifadelerin biçimlendirmesini denetleme
  durationInMinutes: 5
  content: >
    Önceki adımda, sonuç dizesine yetersiz şekilde biçimlendirilmiş iki dize eklenmişti. Bir tarih yalnızca uygun bir tarih ve saat değeri oluştu. İkinci para biriminin göstermek istemediğiniz bir fiyattı. Her iki sorun da kolayca giderilebilir. Dize ilişkilendirme belirtmenize olanak tanır *biçim dizeleri* belirli türlerin biçimlendirmesini denetleyen. Çağrısını değiştirin `Console.WriteLine` aşağıdaki satırda gösterildiği gibi tarih ve fiyat ifadeler için biçim dizeleri dahil etmek için önceki örnekte:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    İki nokta ile ilişkilendirme ifade izleyerek bir biçim dizesi belirtin (":") ve biçim dizesi. "d" bir [standart tarih ve saat biçim dizesi](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) temsil eden kısa tarih biçimi. "C2" olan bir [standart sayısal biçim dizesi](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) , bir sayı olarak iki basamakla para birimi değeri ondalık ayırıcıdan sonra temsil eder.


    .NET kitaplıklarına türlerinde bir dizi önceden tanımlanmış bir dizi biçim dizesini destekler. Bunlar, tüm sayısal türlerin ve tarih ve saat türleri içerir. Biçim dizelerini destekleyen türler tam bir listesi için bkz. [biçim dizeleri ve .NET sınıfı kitaplık türleri](../../../standard/base-types/formatting-types.md#stringRef) içinde [NET'teki biçimlendirme türleri](../../../standard/base-types/formatting-types.md) makalesi.


    Bunlar tarih ve saat ile sayısal biçimlendirme nasıl etkilediğini görmek için örnek'daki biçim dizelerini değiştirmeyi deneyin. "D" değiştirmek `{date:d}` "(kısa saat biçimini görüntülemek için) t", "(yıl ve ay görüntülemek için) y" ve "yyyy" (yılı dört basamaklı bir sayı görüntülemek için). "C2" değiştirmek `{price:C2}` (üstel gösterim için için) "e" ve "F3" (için ondalık ayırıcıdan sonra üç basamak içeren sayısal bir değer).


    Biçimlendirmenin yanı sıra alan genişliğini ve sonuç dizesine eklenir biçimlendirilmiş dizeler hizalamasını da denetleyebilirsiniz. Sonraki adımda, bunun nasıl yapılacağını öğreneceksiniz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi Önizleme modundadır. Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).
- title: Alan genişliğini ve hizalamasını ilişkilendirme ifadeleri denetleme
  durationInMinutes: 6
  content: >
    İlişkilendirilmiş dize ifadesi sonucu dize olarak biçimlendirildiğinde normalde, bu dize bir sonuç dizesinde baştaki veya sondaki boşluk olmadan dahil edilir. Özellikle bir veri kümesiyle bir alan genişliğini denetleyebilir çalışırken ve metin hizalamasını daha okunabilir bir çıktı oluşturmak için yardımcı olur. Bunu görmek için aşağıdaki kodu çalıştırın:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Öğe adları sola hizalanmış ve bunların miktarları ise sağa hizalanmıştır. Virgül ekleyerek hizalamayı belirtin (",") sonra bir ilişkilendirme ifade ve belirleme *minimum* alan genişliği. Belirtilen değer pozitif bir sayıysa alan sağa hizalanır. Negatif bir sayı ise, alan sola hizalanır.


    Negatif işaretlerini kaldırmayı deneyip `{"Item",-25}` ve `{item.Key,-25}` kod ve örneği tekrar çalıştırın. Bu kez öğe adları sağa hizalanır.


    Hizalama tanımlayıcısı ve bir biçim dizesi tek ilişkilendirme ifadesi için birleştirebilirsiniz. Bunu yapmak için ardından iki nokta işareti ve biçim dizesi hizalama ilk olarak belirtin. Alan genişlikleri tanımlı olan biçimlendirilmiş üç dizeyi görüntüleyen aşağıdaki kodu deneyin:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi Önizleme modundadır. Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).
- content: >-
    Dize ilişkilendirme etkileşimli öğreticisini tamamladınız. Tıklayabilirsiniz **koleksiyonlarında C# ** etkileşimli bir sonraki öğreticiye başlatmak için aşağıdaki bağlantı ya da ziyaret edebilirsiniz [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) .NET Core SDK'sını indirmek için makinenizde bir proje oluşturun ve kodlama tutun . "Öğrenme tut" adımı bu öğreticilere geri getirir.


    Daha fazla bilgi için [dize ilişkilendirme](../../language-reference/tokens/interpolated.md).
