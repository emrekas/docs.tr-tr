### YamlMime:Tutorial
title: <span data-ttu-id="a679a-101">Dize ilişkilendirme, biçimlendirilmiş dizeler oluşturmak için kullanın</span><span class="sxs-lookup"><span data-stu-id="a679a-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: Dize ilişkilendirme - C# etkileşimli öğretici
  description: Bu öğreticide, C# dize ilişkilendirme özelliğinden etkileşimli olarak keşfetmek için tarayıcınızı kullanın. C# kodu yazacak ve derleme ve kodunuzu doğrudan tarayıcınızda çalıştırmaya sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 5490176d91a6ed900471e33af6adce1fa3e62d8f
  ms.sourcegitcommit: a3db1a9eafca89f95ccf361bc1833b47fbb2bb30
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 04/04/2019
  ms.locfileid: "58921458"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="a679a-105">Bu öğreticide nasıl kullanacağınızı öğretir [dize ilişkilendirme](../../language-reference/tokens/interpolated.md) değerleri tek bir dize olarak eklenecek.</span><span class="sxs-lookup"><span data-stu-id="a679a-105">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="a679a-106">Ayrıca metin Sonuç dizesini formatlamayı kontrol öğrenin.</span><span class="sxs-lookup"><span data-stu-id="a679a-106">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="a679a-107">Yazmak ve çalıştırmak için tarayıcınızı kullanırsınız C# kod ve sonuçları hemen görebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="a679a-107">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="a679a-108">İlişkilendirilmiş dize oluşturma</span><span class="sxs-lookup"><span data-stu-id="a679a-108">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="a679a-109">Etkileşimli pencerede aşağıdaki kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="a679a-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="a679a-110">Bunu yapmak için kod etkileşimli pencereye yazın (Değiştir `<name>` adınızla) seçip **çalıştırmak**:</span><span class="sxs-lookup"><span data-stu-id="a679a-110">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="a679a-111">Kod çalıştırdığınızda **çıkış** karşılamada adınızı içeren bir dize görüntüler.</span><span class="sxs-lookup"><span data-stu-id="a679a-111">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="a679a-112">Dize bağımsız değişkeni <xref:System.Console.WriteLine%2A> yöntem çağrısında bir *ilişkilendirilmiş bir dizedir*.</span><span class="sxs-lookup"><span data-stu-id="a679a-112">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id="a679a-113">Tek bir dize olanak sağlayan bir şablon türüdür (adlı *sonuç dizesi*), gömülü kod içeren bir dizeden.</span><span class="sxs-lookup"><span data-stu-id="a679a-113">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="a679a-114">İlişkilendirilmiş dizeler özellikle bir dizeye değer eklerken veya birkaç dizeleri birleştirme (bir araya getirme) için yararlıdır.</span><span class="sxs-lookup"><span data-stu-id="a679a-114">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="a679a-115">Yukarıdaki örnek her ilişkilendirilmiş dizenin sahip olması gereken iki öğeleri içerir:</span><span class="sxs-lookup"><span data-stu-id="a679a-115">The example above contains the two elements that every interpolated string must have:</span></span>


    - <span data-ttu-id="a679a-116">İle başlayan bir dize sabit değeri `$` açma tırnak işareti karakterinden önce karakter karakter.</span><span class="sxs-lookup"><span data-stu-id="a679a-116">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="a679a-117">Arasında boşluk olamaz `$` sembol ve tırnak işareti karakteri.</span><span class="sxs-lookup"><span data-stu-id="a679a-117">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="a679a-118">(Görmek istiyorsanız, ne olacağını yaptığınızda, sonra boşluk Ekle `$` karakter etkileşimli pencerede ve güncelleştirilmiş kod çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="a679a-118">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="a679a-119">C# derleyicisi şeklinde hata verir "Beklenmeyen karakter '$'".)</span><span class="sxs-lookup"><span data-stu-id="a679a-119">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="a679a-120">Bir veya daha fazla *ilişkilendirilmiş ifade*.</span><span class="sxs-lookup"><span data-stu-id="a679a-120">One or more *interpolated expressions*.</span></span> <span data-ttu-id="a679a-121">İlişkilendirilmiş ifade bir açma ve kapatma ayracı gösterilir (`{` ve `}`).</span><span class="sxs-lookup"><span data-stu-id="a679a-121">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="a679a-122">Bir değer döndüren bir C# ifadesini ekleyebilirsiniz (dahil olmak üzere `null`) küme ayraçları içinde.</span><span class="sxs-lookup"><span data-stu-id="a679a-122">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="a679a-123">Diğer veri türlerinden bazılarıyla birkaç daha fazla dize ilişkilendirme örneği deneyelim.</span><span class="sxs-lookup"><span data-stu-id="a679a-123">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="a679a-124">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="a679a-124">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a679a-125">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a679a-125">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="a679a-126">Farklı veri türleri ekleme</span><span class="sxs-lookup"><span data-stu-id="a679a-126">Include different data types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="a679a-127">Önceki adımda, bir dizenin içine eklemek için dize ilişkilendirme kullanılır.</span><span class="sxs-lookup"><span data-stu-id="a679a-127">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id="a679a-128">İlişkilendirilmiş ifade sonucu herhangi bir veri türünde ancak olabilir.</span><span class="sxs-lookup"><span data-stu-id="a679a-128">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id="a679a-129">Şimdi bir aradeğerlendirme dizesinde değerleri çeşitli veri türlerini içerir.</span><span class="sxs-lookup"><span data-stu-id="a679a-129">Let's include values of various data types in an interpolated string.</span></span>


    <span data-ttu-id="a679a-130">Aşağıdaki örnekte, ilk tanımlarız bir [sınıfı](../../programming-guide/classes-and-structs/classes.md) veri türü `Vegetable` olan bir `Name` [özelliği](../../properties.md) ve `ToString` [yöntemi](../../methods.md), hangi [geçersiz kılmalar](../../language-reference/keywords/override.md) davranışını <xref:System.Object.ToString?displayProperty=nameWithType> yöntemi.</span><span class="sxs-lookup"><span data-stu-id="a679a-130">In the following example, we first define a [class](../../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has a `Name` [property](../../properties.md) and a `ToString` [method](../../methods.md), which [overrides](../../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="a679a-131">[ `public` Erişim değiştiricisi](../../language-reference/keywords/public.md) bu yöntem herhangi bir istemci kod, dize gösterimini almaya kullanılabilmesini bir `Vegetable` örneği.</span><span class="sxs-lookup"><span data-stu-id="a679a-131">The [`public` access modifier](../../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id="a679a-132">Örnekte `Vegetable.ToString` yöntemi değerini döndürür `Name` sırasında başlatılır özelliği `Vegetable` [Oluşturucusu](../../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span><span class="sxs-lookup"><span data-stu-id="a679a-132">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id="a679a-133">Biz bir örneğini oluşturup `Vegetable` adlı sınıfı `item` kullanarak [ `new` anahtar sözcüğü](../../language-reference/keywords/new-operator.md) oluşturucusu için bir ad sağlayarak `Vegetable`.</span><span class="sxs-lookup"><span data-stu-id="a679a-133">Then we create an instance of the `Vegetable` class named `item` by using the [`new` keyword](../../language-reference/keywords/new-operator.md) and providing a name for the constructor `Vegetable`.</span></span> <span data-ttu-id="a679a-134">Son olarak, bu da içeren ilişkilendirilmiş dize örneğine ekliyoruz bir <xref:System.DateTime> değeri bir <xref:System.Decimal> değeri ve `Unit` [numaralandırma](../../programming-guide/enumeration-types.md) değeri.</span><span class="sxs-lookup"><span data-stu-id="a679a-134">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id="a679a-135">Etkileşimli pencerede aşağıdaki kodu çalıştırın:</span><span class="sxs-lookup"><span data-stu-id="a679a-135">Run the following code in the interactive window:</span></span>


    ```csharp

    public class Vegetable

    {
       public Vegetable(string name) => Name = name;

       public string Name { get; }

       public override string ToString() => Name;
    }


    public enum Unit { item, kilogram, gram, dozen };


    var item = new Vegetable("eggplant");

    var date = DateTime.Now;

    var price = 1.99m;

    var unit = Unit.item;

    Console.WriteLine($"On {date}, the price of {item} was {price} per {unit}.");

    ```


    <span data-ttu-id="a679a-136">Unutmayın ilişkilendirilmiş ifade `item` aradeğerlendirme dizesinde çözümleniyor sonuç dizesindeki "eggplant" metni.</span><span class="sxs-lookup"><span data-stu-id="a679a-136">Note that the interpolated expression `item` in the interpolated string resolves to the text "eggplant" in the result string.</span></span> <span data-ttu-id="a679a-137">Deyim sonucu türü dize olmadığı durumlarda, sonuç şu şekilde bir dizeye çözümlenir çünkü:</span><span class="sxs-lookup"><span data-stu-id="a679a-137">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>


    - <span data-ttu-id="a679a-138">İlişkilendirilmiş ifade değerlendirilirse `null`, boş bir dize ("", veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.</span><span class="sxs-lookup"><span data-stu-id="a679a-138">If the interpolated expression evaluates to `null`, an empty string ("", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>


    - <span data-ttu-id="a679a-139">İlişkilendirilmiş ifade değerlendirme değil, `null`, genellikle `ToString` sonuç türü yöntemi çağrılır.</span><span class="sxs-lookup"><span data-stu-id="a679a-139">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id="a679a-140">Bu uygulamasını güncelleştirerek test `Vegetable.ToString` yöntemi.</span><span class="sxs-lookup"><span data-stu-id="a679a-140">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id="a679a-141">Bile uygulanması gerekmeyebilir `ToString` her türü bu yöntemin bazı uygulama olduğundan yöntemi.</span><span class="sxs-lookup"><span data-stu-id="a679a-141">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id="a679a-142">Bunu test etmek için tanımı için açıklama `Vegetable.ToString` örnekte yöntemi (Bunu yapmak için bir açıklama simgesini yerleştirmek `//`, önündeki).</span><span class="sxs-lookup"><span data-stu-id="a679a-142">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id="a679a-143">Çıkışta "eggplant" dizesi, varsayılan davranış, tam nitelikli tür adı (tür adıyla birlikte C# REPL tarafından tanımlanan ad alanı) değiştirilir, <xref:System.Object.ToString?displayProperty=nameWithType> yöntemi.</span><span class="sxs-lookup"><span data-stu-id="a679a-143">In the output, the string "eggplant" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="a679a-144">Varsayılan davranışını `ToString` yöntemi için bir sabit listesi değeri, değerin dize gösterimi döndürmektir.</span><span class="sxs-lookup"><span data-stu-id="a679a-144">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>


    <span data-ttu-id="a679a-145">Bu örnek çıktıda, (eggplant fiyatı, her saniye değişmez) kesin tarih ve Fiyat değerini para birimi göstermez.</span><span class="sxs-lookup"><span data-stu-id="a679a-145">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id="a679a-146">Sonraki adımda, ifade sonuçları dize temsillerini biçimini denetleyerek bu sorunları gidermek nasıl öğreneceksiniz.</span><span class="sxs-lookup"><span data-stu-id="a679a-146">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="a679a-147">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="a679a-147">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a679a-148">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a679a-148">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="a679a-149">İlişkilendirilmiş ifadelerin biçimlendirmesini denetleme</span><span class="sxs-lookup"><span data-stu-id="a679a-149">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="a679a-150">Önceki adımda, sonuç dizesine yetersiz şekilde biçimlendirilmiş iki dize eklenmişti.</span><span class="sxs-lookup"><span data-stu-id="a679a-150">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="a679a-151">Bir tarih yalnızca uygun bir tarih ve saat değeri oluştu.</span><span class="sxs-lookup"><span data-stu-id="a679a-151">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="a679a-152">İkinci para biriminin göstermek istemediğiniz bir fiyattı.</span><span class="sxs-lookup"><span data-stu-id="a679a-152">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="a679a-153">Her iki sorun da kolayca giderilebilir.</span><span class="sxs-lookup"><span data-stu-id="a679a-153">Both issues are easy to address.</span></span> <span data-ttu-id="a679a-154">Dize ilişkilendirme belirtmenize olanak tanır *biçim dizeleri* belirli türlerin biçimlendirmesini denetleyen.</span><span class="sxs-lookup"><span data-stu-id="a679a-154">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="a679a-155">Çağrısını değiştirin `Console.WriteLine` aşağıdaki satırda gösterildiği gibi tarih ve fiyat ifadeler için biçim dizeleri dahil etmek için önceki örnekte:</span><span class="sxs-lookup"><span data-stu-id="a679a-155">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="a679a-156">İki nokta ile ilişkilendirilmiş ifade izleyerek bir biçim dizesi belirtin (":") ve biçim dizesi.</span><span class="sxs-lookup"><span data-stu-id="a679a-156">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="a679a-157">"d" bir [standart tarih ve saat biçim dizesi](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) temsil eden kısa tarih biçimi.</span><span class="sxs-lookup"><span data-stu-id="a679a-157">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="a679a-158">"C2" olan bir [standart sayısal biçim dizesi](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) , bir sayı olarak iki basamakla para birimi değeri ondalık ayırıcıdan sonra temsil eder.</span><span class="sxs-lookup"><span data-stu-id="a679a-158">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="a679a-159">.NET kitaplıklarına türlerinde bir dizi önceden tanımlanmış bir dizi biçim dizesini destekler.</span><span class="sxs-lookup"><span data-stu-id="a679a-159">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="a679a-160">Bunlar, tüm sayısal türlerin ve tarih ve saat türleri içerir.</span><span class="sxs-lookup"><span data-stu-id="a679a-160">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="a679a-161">Biçim dizelerini destekleyen türler tam bir listesi için bkz. [biçim dizeleri ve .NET sınıfı kitaplık türleri](../../../standard/base-types/formatting-types.md#stringRef) içinde [NET'teki biçimlendirme türleri](../../../standard/base-types/formatting-types.md) makalesi.</span><span class="sxs-lookup"><span data-stu-id="a679a-161">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="a679a-162">Bunlar tarih ve saat ile sayısal biçimlendirme nasıl etkilediğini görmek için örnek'daki biçim dizelerini değiştirmeyi deneyin.</span><span class="sxs-lookup"><span data-stu-id="a679a-162">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="a679a-163">"D" değiştirmek `{date:d}` "(kısa saat biçimini görüntülemek için) t", "(yıl ve ay görüntülemek için) y" ve "yyyy" (yılı dört basamaklı bir sayı görüntülemek için).</span><span class="sxs-lookup"><span data-stu-id="a679a-163">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="a679a-164">"C2" değiştirmek `{price:C2}` (üstel gösterim için için) "e" ve "F3" (için ondalık ayırıcıdan sonra üç basamak içeren sayısal bir değer).</span><span class="sxs-lookup"><span data-stu-id="a679a-164">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="a679a-165">Biçimlendirmenin yanı sıra alan genişliğini ve sonuç dizesine eklenir biçimlendirilmiş dizeler hizalamasını da denetleyebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="a679a-165">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="a679a-166">Sonraki adımda, bunun nasıl yapılacağını öğreneceksiniz.</span><span class="sxs-lookup"><span data-stu-id="a679a-166">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="a679a-167">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="a679a-167">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a679a-168">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a679a-168">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="a679a-169">Alan genişliğini ve hizalamasını ilişkilendirilmiş ifadeler denetim</span><span class="sxs-lookup"><span data-stu-id="a679a-169">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="a679a-170">İlişkilendirilmiş ifade sonucu dize olarak biçimlendirildiğinde normalde, bu dize bir sonuç dizesinde baştaki veya sondaki boşlukları dahil edilir.</span><span class="sxs-lookup"><span data-stu-id="a679a-170">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="a679a-171">Özellikle bir veri kümesiyle bir alan genişliğini denetleyebilir çalışırken ve metin hizalamasını daha okunabilir bir çıktı oluşturmak için yardımcı olur.</span><span class="sxs-lookup"><span data-stu-id="a679a-171">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="a679a-172">Bunu görmek için aşağıdaki kodu çalıştırın:</span><span class="sxs-lookup"><span data-stu-id="a679a-172">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="a679a-173">Öğe adları sola hizalanmış ve bunların miktarları ise sağa hizalanmıştır.</span><span class="sxs-lookup"><span data-stu-id="a679a-173">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="a679a-174">Virgül ekleyerek hizalamayı belirtin (",") ilişkilendirilmiş bir ifadenin sonra ve belirleme *minimum* alan genişliği.</span><span class="sxs-lookup"><span data-stu-id="a679a-174">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="a679a-175">Belirtilen değer pozitif bir sayıysa alan sağa hizalanır.</span><span class="sxs-lookup"><span data-stu-id="a679a-175">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="a679a-176">Negatif bir sayı ise, alan sola hizalanır.</span><span class="sxs-lookup"><span data-stu-id="a679a-176">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="a679a-177">Negatif işaretlerini kaldırmayı deneyip `{"Item",-25}` ve `{item.Key,-25}` kod ve örneği tekrar çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="a679a-177">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="a679a-178">Bu kez öğe adları sağa hizalanır.</span><span class="sxs-lookup"><span data-stu-id="a679a-178">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="a679a-179">Hizalama tanımlayıcısı ve bir biçim dizesi için tek bir ilişkilendirilmiş ifadede birleştirebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="a679a-179">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="a679a-180">Bunu yapmak için ardından iki nokta işareti ve biçim dizesi hizalama ilk olarak belirtin.</span><span class="sxs-lookup"><span data-stu-id="a679a-180">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="a679a-181">Alan genişlikleri tanımlı olan biçimlendirilmiş üç dizeyi görüntüleyen aşağıdaki kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="a679a-181">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="a679a-182">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="a679a-182">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a679a-183">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a679a-183">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="a679a-184">Dize ilişkilendirme etkileşimli öğreticisini tamamladınız.</span><span class="sxs-lookup"><span data-stu-id="a679a-184">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="a679a-185">Tıklayabilirsiniz \*\*koleksiyonlarında C# \*\* etkileşimli bir sonraki öğreticiye başlatmak için aşağıdaki bağlantı ya da ziyaret edebilirsiniz [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) .NET Core SDK'sını indirmek için makinenizde bir proje oluşturun ve kodlama tutun .</span><span class="sxs-lookup"><span data-stu-id="a679a-185">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="a679a-186">"Öğrenme tut" adımı bu öğreticilere geri getirir.</span><span class="sxs-lookup"><span data-stu-id="a679a-186">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="a679a-187">Daha fazla bilgi için [dize ilişkilendirme](../../language-reference/tokens/interpolated.md).</span><span class="sxs-lookup"><span data-stu-id="a679a-187">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
