### YamlMime:Tutorial
title: <span data-ttu-id="f46cc-101">Dize ilişkilendirme, biçimlendirilmiş dizeler oluşturmak için kullanın</span><span class="sxs-lookup"><span data-stu-id="f46cc-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: Dize ilişkilendirme - C# etkileşimli öğretici
  description: Bu öğreticide, C# dize ilişkilendirme özelliğinden etkileşimli olarak keşfetmek için tarayıcınızı kullanın. C# kodu yazacak ve derleme ve kodunuzu doğrudan tarayıcınızda çalıştırmaya sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70d63f460ad2e67fe60cd8d5130e8ff22889d8be
  ms.sourcegitcommit: 96543603ae29bc05cecccb8667974d058af63b4a
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/24/2019
  ms.locfileid: "66195945"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="f46cc-105">Bu öğreticide nasıl kullanacağınızı öğretir [dize ilişkilendirme](../../language-reference/tokens/interpolated.md) değerleri tek bir dize olarak eklenecek.</span><span class="sxs-lookup"><span data-stu-id="f46cc-105">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="f46cc-106">Ayrıca metin Sonuç dizesini formatlamayı kontrol öğrenin.</span><span class="sxs-lookup"><span data-stu-id="f46cc-106">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="f46cc-107">Yazmak ve çalıştırmak için tarayıcınızı kullanırsınız C# kod ve sonuçları hemen görebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="f46cc-107">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="f46cc-108">İlişkilendirilmiş dize oluşturma</span><span class="sxs-lookup"><span data-stu-id="f46cc-108">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="f46cc-109">Etkileşimli pencerede aşağıdaki kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="f46cc-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="f46cc-110">Bunu yapmak için kod etkileşimli pencereye yazın (Değiştir `<name>` adınızla) seçip **çalıştırmak**:</span><span class="sxs-lookup"><span data-stu-id="f46cc-110">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="f46cc-111">Kod çalıştırdığınızda **çıkış** karşılamada adınızı içeren bir dize görüntüler.</span><span class="sxs-lookup"><span data-stu-id="f46cc-111">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="f46cc-112">Dize bağımsız değişkeni <xref:System.Console.WriteLine%2A> yöntem çağrısında bir *ilişkilendirilmiş dize ifadesi*.</span><span class="sxs-lookup"><span data-stu-id="f46cc-112">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string expression*.</span></span> <span data-ttu-id="f46cc-113">Tek bir dize olanak sağlayan bir şablon türüdür (adlı *sonuç dizesi*), gömülü kod içeren bir dizeden.</span><span class="sxs-lookup"><span data-stu-id="f46cc-113">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="f46cc-114">İlişkilendirilmiş dize ifadeleri bir dizeye değer eklerken veya birkaç dizeleri birleştirme (bir araya getirme) için özellikle yararlıdır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-114">Interpolated string expressions are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="f46cc-115">Yukarıdaki örnek her ilişkilendirilmiş dize ifadesi olmalıdır iki öğeleri içerir:</span><span class="sxs-lookup"><span data-stu-id="f46cc-115">The example above contains the two elements that every interpolated string expression must have:</span></span>


    - <span data-ttu-id="f46cc-116">İle başlayan bir dize sabit değeri `$` açma tırnak işareti karakterinden önce karakter karakter.</span><span class="sxs-lookup"><span data-stu-id="f46cc-116">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="f46cc-117">Arasında boşluk olamaz `$` sembol ve tırnak işareti karakteri.</span><span class="sxs-lookup"><span data-stu-id="f46cc-117">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="f46cc-118">(Görmek istiyorsanız, ne olacağını yaptığınızda, sonra boşluk Ekle `$` karakter etkileşimli pencerede ve güncelleştirilmiş kod çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="f46cc-118">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="f46cc-119">C# derleyicisi şeklinde hata verir "Beklenmeyen karakter '$'".)</span><span class="sxs-lookup"><span data-stu-id="f46cc-119">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="f46cc-120">Bir veya daha fazla *ilişkilendirme ifadeleri*.</span><span class="sxs-lookup"><span data-stu-id="f46cc-120">One or more *interpolation expressions*.</span></span> <span data-ttu-id="f46cc-121">Bir ilişkilendirme ifade bir açma ve kapatma ayracı gösterilir (`{` ve `}`).</span><span class="sxs-lookup"><span data-stu-id="f46cc-121">An interpolation expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="f46cc-122">Bir değer döndüren bir C# ifadesini ekleyebilirsiniz (dahil olmak üzere `null`) küme ayraçları içinde.</span><span class="sxs-lookup"><span data-stu-id="f46cc-122">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="f46cc-123">Diğer veri türlerinden bazılarıyla birkaç daha fazla dize ilişkilendirme örneği deneyelim.</span><span class="sxs-lookup"><span data-stu-id="f46cc-123">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="f46cc-124">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-124">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f46cc-125">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="f46cc-125">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="f46cc-126">Farklı veri türleri ekleme</span><span class="sxs-lookup"><span data-stu-id="f46cc-126">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"f46cc-127\">Önceki adımda, bir dizenin içine eklemek için dize ilişkilendirme kullanılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-127\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"f46cc-128\">İlişkilendirilmiş dize ifadesi bir parçası olan her bir ilişkilendirme ifade herhangi bir veri türünde ancak olabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-128\">Each interpolation expression that is part of an interpolated string expression can be of any data type, though.</span></span> <span data-ttu-id=\"f46cc-129\">Şimdi bir aradeğerlendirme dizesinde çeşitli veri türü ifadeleri değerlerini içerir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-129\">Let's include values of various data type expressions in an interpolated string.</span></span>\n\n<span data-ttu-id=\"f46cc-130\">Aşağıdaki örnekte, ilk tanımlarız bir [demet](../../tuples.md) olan `Name`, `Price`, ve `perPackage` üyeleri.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-130\">In the following example, we first define a [tuple](../../tuples.md) that has `Name`, `Price`, and `perPackage` members.</span></span> <span data-ttu-id=\"f46cc-131\">Etkileşimli pencerede aşağıdaki kodu çalıştırın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-131\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\n<span data-ttu-id=\"f46cc-132\">Unutmayın ilişkilendirme ifade `item.Price` aradeğerlendirme dizesinde çözümleniyor sonuç dizesindeki \"1.99\" metni.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-132\">Note that the interpolation expression `item.Price` in the interpolated string resolves to the text \"1.99\" in the result string.</span></span> <span data-ttu-id=\"f46cc-133\">Deyim sonucu türü dize olmadığı durumlarda, sonuç şu şekilde bir dizeye çözümlenir çünkü:</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-133\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"f46cc-134\">İlişkilendirme ifade değerlendirilirse `null`, boş bir dize (\"\", veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-134\">If the interpolation expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"f46cc-135\">İlişkilendirme ifade değerlendirme değil, `null`, genellikle `ToString` sonuç ifadesi yöntemi çağrılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-135\">If the interpolation expression doesn't evaluate to `null`, typically the `ToString` method of the result expression is called.</span></span> \n\n<span data-ttu-id=\"f46cc-136\">Bu örnek çıktıda, (eggplant fiyatı, her saniye değişmez) kesin tarih ve Fiyat değerini para birimi göstermez.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-136\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"f46cc-137\">Sonraki adımda, ifade sonuçları dize temsillerini biçimini denetleyerek bu sorunları gidermek nasıl öğreneceksiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-137\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"f46cc-138\">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-138\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"f46cc-139\">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"f46cc-139\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="f46cc-140">İlişkilendirme ifadelerin biçimlendirmesini denetleme</span><span class="sxs-lookup"><span data-stu-id="f46cc-140">Control the formatting of interpolation expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="f46cc-141">Önceki adımda, sonuç dizesine yetersiz şekilde biçimlendirilmiş iki dize eklenmişti.</span><span class="sxs-lookup"><span data-stu-id="f46cc-141">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="f46cc-142">Bir tarih yalnızca uygun bir tarih ve saat değeri oluştu.</span><span class="sxs-lookup"><span data-stu-id="f46cc-142">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="f46cc-143">İkinci para biriminin göstermek istemediğiniz bir fiyattı.</span><span class="sxs-lookup"><span data-stu-id="f46cc-143">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="f46cc-144">Her iki sorun da kolayca giderilebilir.</span><span class="sxs-lookup"><span data-stu-id="f46cc-144">Both issues are easy to address.</span></span> <span data-ttu-id="f46cc-145">Dize ilişkilendirme belirtmenize olanak tanır *biçim dizeleri* belirli türlerin biçimlendirmesini denetleyen.</span><span class="sxs-lookup"><span data-stu-id="f46cc-145">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="f46cc-146">Çağrısını değiştirin `Console.WriteLine` aşağıdaki satırda gösterildiği gibi tarih ve fiyat ifadeler için biçim dizeleri dahil etmek için önceki örnekte:</span><span class="sxs-lookup"><span data-stu-id="f46cc-146">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    <span data-ttu-id="f46cc-147">İki nokta ile ilişkilendirme ifade izleyerek bir biçim dizesi belirtin (":") ve biçim dizesi.</span><span class="sxs-lookup"><span data-stu-id="f46cc-147">You specify a format string by following the interpolation expression with a colon (":") and the format string.</span></span> <span data-ttu-id="f46cc-148">"d" bir [standart tarih ve saat biçim dizesi](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) temsil eden kısa tarih biçimi.</span><span class="sxs-lookup"><span data-stu-id="f46cc-148">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="f46cc-149">"C2" olan bir [standart sayısal biçim dizesi](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) , bir sayı olarak iki basamakla para birimi değeri ondalık ayırıcıdan sonra temsil eder.</span><span class="sxs-lookup"><span data-stu-id="f46cc-149">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="f46cc-150">.NET kitaplıklarına türlerinde bir dizi önceden tanımlanmış bir dizi biçim dizesini destekler.</span><span class="sxs-lookup"><span data-stu-id="f46cc-150">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="f46cc-151">Bunlar, tüm sayısal türlerin ve tarih ve saat türleri içerir.</span><span class="sxs-lookup"><span data-stu-id="f46cc-151">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="f46cc-152">Biçim dizelerini destekleyen türler tam bir listesi için bkz. [biçim dizeleri ve .NET sınıfı kitaplık türleri](../../../standard/base-types/formatting-types.md#stringRef) içinde [NET'teki biçimlendirme türleri](../../../standard/base-types/formatting-types.md) makalesi.</span><span class="sxs-lookup"><span data-stu-id="f46cc-152">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="f46cc-153">Bunlar tarih ve saat ile sayısal biçimlendirme nasıl etkilediğini görmek için örnek'daki biçim dizelerini değiştirmeyi deneyin.</span><span class="sxs-lookup"><span data-stu-id="f46cc-153">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="f46cc-154">"D" değiştirmek `{date:d}` "(kısa saat biçimini görüntülemek için) t", "(yıl ve ay görüntülemek için) y" ve "yyyy" (yılı dört basamaklı bir sayı görüntülemek için).</span><span class="sxs-lookup"><span data-stu-id="f46cc-154">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="f46cc-155">"C2" değiştirmek `{price:C2}` (üstel gösterim için için) "e" ve "F3" (için ondalık ayırıcıdan sonra üç basamak içeren sayısal bir değer).</span><span class="sxs-lookup"><span data-stu-id="f46cc-155">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="f46cc-156">Biçimlendirmenin yanı sıra alan genişliğini ve sonuç dizesine eklenir biçimlendirilmiş dizeler hizalamasını da denetleyebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="f46cc-156">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="f46cc-157">Sonraki adımda, bunun nasıl yapılacağını öğreneceksiniz.</span><span class="sxs-lookup"><span data-stu-id="f46cc-157">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="f46cc-158">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-158">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f46cc-159">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="f46cc-159">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="f46cc-160">Alan genişliğini ve hizalamasını ilişkilendirme ifadeleri denetleme</span><span class="sxs-lookup"><span data-stu-id="f46cc-160">Control the field width and alignment of interpolation expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="f46cc-161">İlişkilendirilmiş dize ifadesi sonucu dize olarak biçimlendirildiğinde normalde, bu dize bir sonuç dizesinde baştaki veya sondaki boşluk olmadan dahil edilir.</span><span class="sxs-lookup"><span data-stu-id="f46cc-161">Ordinarily, when the result of an interpolated string expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="f46cc-162">Özellikle bir veri kümesiyle bir alan genişliğini denetleyebilir çalışırken ve metin hizalamasını daha okunabilir bir çıktı oluşturmak için yardımcı olur.</span><span class="sxs-lookup"><span data-stu-id="f46cc-162">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="f46cc-163">Bunu görmek için aşağıdaki kodu çalıştırın:</span><span class="sxs-lookup"><span data-stu-id="f46cc-163">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="f46cc-164">Öğe adları sola hizalanmış ve bunların miktarları ise sağa hizalanmıştır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-164">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="f46cc-165">Virgül ekleyerek hizalamayı belirtin (",") sonra bir ilişkilendirme ifade ve belirleme *minimum* alan genişliği.</span><span class="sxs-lookup"><span data-stu-id="f46cc-165">You specify the alignment by adding a comma (",") after an interpolation expression and designating the *minimum* field width.</span></span> <span data-ttu-id="f46cc-166">Belirtilen değer pozitif bir sayıysa alan sağa hizalanır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-166">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="f46cc-167">Negatif bir sayı ise, alan sola hizalanır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-167">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="f46cc-168">Negatif işaretlerini kaldırmayı deneyip `{"Item",-25}` ve `{item.Key,-25}` kod ve örneği tekrar çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="f46cc-168">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="f46cc-169">Bu kez öğe adları sağa hizalanır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-169">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="f46cc-170">Hizalama tanımlayıcısı ve bir biçim dizesi tek ilişkilendirme ifadesi için birleştirebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="f46cc-170">You can combine an alignment specifier and a format string for a single interpolation expression.</span></span> <span data-ttu-id="f46cc-171">Bunu yapmak için ardından iki nokta işareti ve biçim dizesi hizalama ilk olarak belirtin.</span><span class="sxs-lookup"><span data-stu-id="f46cc-171">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="f46cc-172">Alan genişlikleri tanımlı olan biçimlendirilmiş üç dizeyi görüntüleyen aşağıdaki kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="f46cc-172">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="f46cc-173">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="f46cc-173">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f46cc-174">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="f46cc-174">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="f46cc-175">Dize ilişkilendirme etkileşimli öğreticisini tamamladınız.</span><span class="sxs-lookup"><span data-stu-id="f46cc-175">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="f46cc-176">Tıklayabilirsiniz \*\*koleksiyonlarında C# \*\* etkileşimli bir sonraki öğreticiye başlatmak için aşağıdaki bağlantı ya da ziyaret edebilirsiniz [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) .NET Core SDK'sını indirmek için makinenizde bir proje oluşturun ve kodlama tutun .</span><span class="sxs-lookup"><span data-stu-id="f46cc-176">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="f46cc-177">"Öğrenme tut" adımı bu öğreticilere geri getirir.</span><span class="sxs-lookup"><span data-stu-id="f46cc-177">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="f46cc-178">Daha fazla bilgi için [dize ilişkilendirme](../../language-reference/tokens/interpolated.md).</span><span class="sxs-lookup"><span data-stu-id="f46cc-178">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
