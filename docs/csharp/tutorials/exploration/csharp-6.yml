### YamlMime:Tutorial
title: 6 C# C# etkileşimli C# öğreticiyi keşfet
metadata:
  title: 6 C# ' yı keşfet-tarayıcınızı kullanarak 6 C# ' da yeni özellikleri etkileşimli olarak deneyin
  description: Bu öğreticide, tarayıcınızı kullanarak 6 etkileşimli olarak keşfedebilirsiniz C# . Daha kısa ve okunabilir kod sağlamak için 6 ile C# kullanabileceğiniz yeni deyimleri keşfedebilirsiniz.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f6f4b95b0c9afd9f70d4eba41500fc8a26606c78
  ms.sourcegitcommit: c70542d02736e082e8dac67dad922c19249a8893
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 09/05/2019
  ms.locfileid: "70374321"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici, kodunuzu derleyip C# çalıştırmanın sonuçlarını yazmak C# ve görüntülemek için tarayıcınızı kullanarak 6 etkileşimli olarak araştırmanıza olanak sağlar. Önceki C# uygulamaları daha yeni, daha kısa C# 6 özellikleri kullanacak şekilde değiştiren bir dizi ders içerir. Bu makalenin geri kalanında, her bir özelliği keşfetmeye yönelik bir bağlantı ile bu özelliklerin her biri için bir genel bakış sunulmaktadır.
- title: Salt okuma otomatik özellikleri salt okuma türlerini etkinleştir
  durationInMinutes: 2
  content: "Otomatik özellik sözdiziminde iki geliştirme özelliği, otomatik özelliklerin daha fazla yerde kullanılmasını kolaylaştırır: salt okunurdur otomatik özellikler ve otomatik özellik başlatıcıları. Bu küçük programı göz önünde bulundurun:\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Odak moduna girer, önceki kodu C# etkileşimli pencereye kopyalayın. Ardından kodun ne yaptığını görmek için *Çalıştır* ' a tıklayın. `AllCaps`, özellik değerlerini, büyük harfli dizeyi döndürerek birlikte değiştirmenin istenmeyen yan etkisine sahiptir. `Person` Sınıfının yazarı, ve `FirstName` `LastName` için dizelerin salt okunurdur. 6 C# ile, bu amacı açık hale getirebilirsiniz. `private set` Salt okunurdur otomatik özellik oluşturmak için her iki özellikten de kaldırın. Derleyicinin ** , `FirstName` ve`LastName` özelliklerinin değiştirildiklerinde değiştiği iki konum olduğunu görmek için Çalıştır ' a tıklayın. Derleyici hatasını giderecek `AllCaps` yöntemi aşağıdaki kodla değiştirebilirsiniz:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nDerleyici, bu yeni söz dizimini kullanarak özelliklerin sabit olmasını sağlar.\n"
- title: Otomatik özellikler için yedekleme alanlarını başlatma
  durationInMinutes: 1
  content: "6 ' da C# yeni sözdizimi otomatik özellikler için başlatıcıları kullanmanıza olanak sağlar. Bu, sınıflar yeni özellikleri büyürken daha önemli hale gelir. Bir göbek adı özelliği ve sınıfınıza `Person` üç dize alan yeni bir Oluşturucu ekleyin:\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n`MiddleName` Özelliğindeki atama bir başlatıcıdır. İkinci ad için derleyici tarafından oluşturulan yedekleme alanını başlatır.\n"
- title: İfade gövdeli üyeler
  durationInMinutes: 2
  content: >
    İfade-Bodied Üyeler hafif yöntemler için hafif bir sözdizimi sağlar. `Person` Sınıfta iki harika aday vardır. Bildirimine `ToString`bakın:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Bu bildirimini `ToString` aşağıdaki kodla değiştirin:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    `AllCaps` Yöntemiyle aynısını deneyin. Bu küçük bir iyileştirmedir, ancak özellikle de Veri Aktarımı nesneleri (DTOs) ve en az davranışa sahip diğer türler için çok daha okunabilir kod oluşturur.
- title: Tek bir sınıfı içeri aktarma
  durationInMinutes: 2
  content: "Kodunuzun tamamında sürekli olarak bir sınıf ' statik yöntemleri kullanırsanız (her zaman kodunuzun anlamını her olumsuz bir şekilde). Sınıf şu anda yalnızca `System` <xref:System.Console?displayProperty=nameWithType> kullanılıyor olsa da ad alanını içeri aktarır. `Person` `using` İfadeyi aşağıdaki gibi değiştirin:\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\nBu ifade, [`string`](xref:System.String) sınıf veya <xref:System.Math?displayProperty=nameWithType> sınıf gibi birçok statik yöntemle tek bir sınıfın kapsamlı bir şekilde kullanılmasını sağlayan daha büyük programlarda daha yararlı hale gelir. `static using`\n"
- title: Daha iyi bir dize biçimi
  durationInMinutes: 2
  content: "C#6 bir dizeden dize oluşturmaya yönelik yeni sözdizimi ve diğer dize değerlerini oluşturmak için değerlendirilen katıştırılmış ifadeleri içerir. `ToString` Ve`AllCaps` yöntemlerini bu söz dizimini kullanacak şekilde değiştirebilirsiniz:\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n`{` Ve arasında`}`Konumsal bağımsız değişkenler yerine, ifadeleri doğrudan yazarsınız C# . `Main` Yönteminde aynı şekilde yapabilirsiniz. Mevcut kodu şu kodla değiştirin:\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nBu İfadelerdeki tek bir değişkenle sınırlı değilsiniz. Yeni bir örnekle başlayalım ve dize ilişkilendirimiyle kullanabileceğiniz diğer ifadeleri gösterecek şekilde değiştirin. Aşağıdaki kodu `Main` yönteminde etkileşimli pencereye yapıştırın:\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\nYerel değişkeni `average` kaldırabilir ve bu hesaplamayı, enterpolasyonlu dize ifadesinin bir parçası olarak gerçekleştirebilirsiniz. Son iki satırı aşağıdaki kodla değiştirin:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nÖnceki örneği çalıştırarak, için `Average` çıkışının istediğiniz daha fazla ondalık basamak olduğunu fark edersiniz. Dize ilişkilendirme sözdizimi, önceki biçimlendirme yöntemleri kullanılarak kullanılabilir olan tüm biçim dizelerini destekler. Biçim dizesini küme ayraçları içinde belirtirsiniz. Biçimlendirmek için `:` aşağıdaki ifadeyi ekleyin:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Hızlı ve kolay null denetimler
  durationInMinutes: 2
  content: "(Null koşullu) operatörü, ek `if` denetimler olmadan, `null` değerleri hesaba sorunsuz olarak getiren mantığı yazmayı kolaylaştırır. `?.` Özelliği araştırmak için, aşağıdaki kodu denemek üzere etkileşimli pencereye kopyalayarak başlayın:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nÖrneği çalıştırdığınızda bir <xref:System.NullReferenceException> oluşturur. Üye erişim işlecini **null koşullu işlece**değiştirin: `.`\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nBu değişiklikten sonra çıkış yok. Bunun nedeni `s?.Length` `s.Length` , sonucu bir`int`olduğundaolur. `int?` Bu örnekte, `s?.Length`. `null` , `?.` Sol `null` işleneni ise`null`döndürür. Sağ işlenenin türü bir değer türü ise, `?.` işleç bu tür için null yapılabilir bir tür döndürür. Ayrıca `?.` , dizi veya Dizin Oluşturucu `?[]` erişimi için kullanabilirsiniz. Etkileşimli pencerede aşağıdaki kodu deneyin:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Birden çok koşullu işleç tek bir ifadede birleştirilebilir. Sol işlenen bir `null` sonuç üretir, bu da üye üyelerine erişim için iç içe geçmiş yan tümcelerinin kaçınılmasını kolaylaştırır. `null` Örneğin, etkileşimli pencerede aşağıdaki kodu deneyin:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n Yukarıdaki örnek, varsayılan bir değer sağlamak için **null birleşim işleci** kullanılarak basitleştirilebilir:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n **Null koşullu operatör** , değerler için `null` sorunsuz bir şekilde test ederken çekirdek mantığınızı temizlemenizi sağlayan kodu yazmanızı sağlar.\n"
- title: Özel durum filtreleri
  durationInMinutes: 2
  content: "Özel durum filtreleri, bir özel durumu bir koşula göre yakalayacak şekilde etkinleştirir. Yaygın olarak kullanılan bir yöntem, özel durumları günlüğe kaydeden ancak bu özel durumları hiçbir şekilde işlemez bir filtre yöntemi oluşturmaktır. `true` Özel durum filtresi, `catch` yan tümcesinin yürütülmesi gereken ve `false` özel durumun `catch` yan tümce tarafından yakalanmadığında oluşan bir Boolean ifadedir. Etkileşimli pencerede aşağıdaki kodu deneyin: Özel durum türünü ve iletisini konsola kaydeder. Özel durumun `false` işlenemediğini belirten döndürür. Programı etkileşimli pencerede deneyin.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n`LogException` Yönteminden ve ardından varsayılan özel durum iletisinden iletiyi görmeniz gerekir. Denemek için, `return false` ifadesini olarak `return true` değiştirin ve yeniden çalıştırın. Şimdi özel durum yakalandı ve program tamamlanmak üzere çalışıyor.\n\nGünlüğe kaydetme senaryolarının ötesinde özel durum filtreleri, bir özel durumun özelliği hangi eylemin yapılacağını belirlerken en yararlı olabilir. Örneğin, içerilen özel durumların ne olduğunu görmek <xref:System.AggregateException> için bir öğesine bakabilir ve belirli özel duruma bağlı olarak uygun bir işlem yapabilirsiniz.\n"
- title: NameOf kullanma
  durationInMinutes: 2
  content: "`nameof` İşleci herhangi bir değişkenin, türün veya türün üyesinin adını döndürür. Nasıl çalıştığını görmek için etkileşimli pencerede aşağıdaki kodu deneyin:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nÇıktı, değişkenin veya türün adıyla eşleşir. Tam nitelikli tür adı sağlasanız bile ( `System.String`gibi), `nameof` işleç nitelenmemiş adı döndürür. Bu özellik, bir parametre veya özellik adını bir dizeye dönüştürmeniz gerektiğinde faydalıdır. Örnek olarak, veya <xref:System.ArgumentNullException> <xref:System.ArgumentException>oluştururken bir bağımsız değişkenin adını yakalama veya uygularken <xref:System.ComponentModel.INotifyPropertyChanged>değiştirilen bir özelliğin adını yakalama sayılabilir. \n"
- title: Yeni nesne başlatma sözdizimi
  durationInMinutes: 2
  content: "Nesne başlatıcısı sözdizimi artık *dizin oluşturucularının* yanı sıra özellikleri ve alanları başlatmayı desteklemektedir. Bu ek, sözlükleri ve diğer türleri başlatmayı kolaylaştırır. Bir sözlük ile başlayın. Etkileşimli pencerede aşağıdaki kodu çalıştırın:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nBir dizin oluşturucuda bir değer ayarlayan bu sözdizimi, bir dizin oluşturucuda erişilebilir bir set erişimcisine sahip olan herhangi bir tür için kullanılabilir.\n\nİkinci bir değişiklik, dizileri temsil eden türler için Başlatıcı sözdiziminin etkinleşmesini kolaylaştırır. Koleksiyon başlatıcıları, uygulayan <xref:System.Collections.IEnumerable> ve genel olarak erişilebilen `Add` bir yöntemi olan herhangi bir sınıfta kullanılabilir. Bu `Add` Yöntem artık bir genişletme yöntemi olabilir. \n\nAşağıdaki örnekte bu söz dizimi için bir senaryo gösterilmektedir. `Path` Uygulayan`IEnumerable<Point3D>` ve üç bağımsız değişken alan noktaları eklemek için bir yöntemine sahip bir sınıf oluşturur. Sınıfı `Extensions` , üç bileşenlerinden yeni `Add` bir nokta eklemek için ek bir yöntem oluşturur. Bu örnek, ortamdaki kısıtlamalar nedeniyle şu anda etkileşimli olarak çalışmaz.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: 6 ' daki C# yeni özellikleri araştırmayı tamamladınız. Şimdi bunları uygulamalarınızda kendiniz deneyin.
