### YamlMime:Tutorial
title: <span data-ttu-id="bd164-101">Keşfedin C# 6 - C# etkileşimli C# Öğreticisi</span><span class="sxs-lookup"><span data-stu-id="bd164-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: Keşfedin C# 6 - yeni özellikleri deneyin C# 6 etkileşimli olarak tarayıcınızı kullanarak
  description: Bu öğreticide keşfetmek için tarayıcınızı kullanacaksınız C# 6 etkileşimli olarak. İle birlikte kullanabileceğiniz yeni deyimleri hakkında bilgi edineceksiniz C# daha kısa süren ve okunabilir bir kod sağlayan 6.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: d782899c3b29851f020cd9fc07cde8f408bf2ac5
  ms.sourcegitcommit: 6b308cf6d627d78ee36dbbae8972a310ac7fd6c8
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 01/23/2019
  ms.locfileid: "54634265"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="bd164-105">Bu öğretici sayesinde keşfedin C# 6 etkileşimli olarak yazmak için tarayıcınızı kullanarak C# ve derleyerek ve çalıştırarak kodunuzun sonuçlarını göreceksiniz.</span><span class="sxs-lookup"><span data-stu-id="bd164-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="bd164-106">Bir dizi Ders daha önce değiştiren içerdiği C# yeni, daha kısa kullanmak için uygulamaları C# 6 özellikleri.</span><span class="sxs-lookup"><span data-stu-id="bd164-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="bd164-107">Bu makalenin geri kalanında her bir özellik keşfetmek için bir bağlantı ile bu özelliklerin her biri bir bakış sağlar.</span><span class="sxs-lookup"><span data-stu-id="bd164-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="bd164-108">Salt okunur otomatik özellikleri salt okunur türleri etkinleştirme</span><span class="sxs-lookup"><span data-stu-id="bd164-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd164-109\">Otomatik özelliği söz dizimi iki iyileştirme otomatik özelliklerde daha fazla yerde kullanmak kolaylaştırır: salt okunur otomatik özelliklerde ve otomatik-özellik başlatıcıları.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"bd164-110\">Bu küçük bir program göz önünde bulundurun:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"bd164-111\">Odak moduna gir, önceki kodu kopyalayın C# etkileşimli penceresi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"bd164-112\">' A tıklayarak *çalıştırma* ne yaptığını görmek için.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"bd164-113\">`AllCaps` büyük harf dizesi döndüren yanı sıra özellik değerlerini değiştirerek istenmeyen yan etkisi vardır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"bd164-114\">Yazarı `Person` sınıfı, dizeleri için hedeflenen `FirstName` ve `LastName` salt okunur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"bd164-115\">İle C# 6, bu amaç Temizle yapabilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"bd164-116\">Kaldırma `private set` bir salt okunur otomatik özelliği oluşturmak için her iki özelliklerinden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"bd164-117\">Tıklayın *çalıştırma* derleyici iki konum noktaların görmek için burada `FirstName` ve `LastName` özellikleri değil olmalıydı olduğunda değiştirilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"bd164-118\">Değiştirebileceğiniz `AllCaps` derleyici hatayı düzeltmek için aşağıdaki koda yöntemi:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"bd164-119\">Bu yeni söz dizimini kullanarak, derleyici özelliklerini sabit olmasını sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="bd164-120">Otomatik özelliklerde için destekleyen alanlar</span><span class="sxs-lookup"><span data-stu-id="bd164-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"bd164-121\">Yeni sözdiziminde C# 6 için otomatik özelliklerde başlatıcılar kullanmanıza olanak sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"bd164-122\">Bu yeni özellikler sınıfları büyüdükçe daha önemli hale gelir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"bd164-123\">İkinci ad özelliği ve üç dizeleri alan yeni bir oluşturucu ekleyin, `Person` sınıfı:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"bd164-124\">Atama `MiddleName` bir başlatıcı bir özelliktir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"bd164-125\">İkinci Ad için derleyici tarafından oluşturulan yedekleme alanını başlatır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="bd164-126">İfade gövdeli üyeler</span><span class="sxs-lookup"><span data-stu-id="bd164-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="bd164-127">İfade gövdeli üyeler, basit yöntemler için basit bir söz dizimi sağlar.</span><span class="sxs-lookup"><span data-stu-id="bd164-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="bd164-128">`Person` Sınıfı iki önemli adaylar sahiptir.</span><span class="sxs-lookup"><span data-stu-id="bd164-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="bd164-129">Bildirimi Ara `ToString`:</span><span class="sxs-lookup"><span data-stu-id="bd164-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="bd164-130">Bu bildirimi değiştirin `ToString` aşağıdaki kod ile:</span><span class="sxs-lookup"><span data-stu-id="bd164-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="bd164-131">Aynı deneyin `Caps` yöntemi.</span><span class="sxs-lookup"><span data-stu-id="bd164-131">Try the same with the `Caps` method.</span></span> <span data-ttu-id="bd164-132">Küçük geliştirme budur ancak akıllıca kullanıldığında daha okunabilir bir kod özellikle veri aktarımı nesneleri (Dto) ve diğer türler en az bir davranış için oluşturur.</span><span class="sxs-lookup"><span data-stu-id="bd164-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="bd164-133">Tek bir sınıfı içeri aktarılıyor</span><span class="sxs-lookup"><span data-stu-id="bd164-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd164-134\">Kodunuzu sürekli olarak bir sınıfın statik yöntemleri kullanırsanız, her zaman sınıf adı dahil olmak üzere, kodunuzun anlamı gizler.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"bd164-135\">`Person` Sınıfı şu anda içeri aktarmalar `System` ad alanı, yalnızca olsa bile <xref:System.Console?displayProperty=nameWithType> kullanılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"bd164-136\">Değiştirme `using` deyimi aşağıdaki gibi:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"bd164-137\">`static using` Bildirimi gibi çok sayıda statik yöntemleriyle kapsamlı kullanımını tek bir sınıf yapmak daha büyük programlarda daha kullanışlı olur [ `string` ](xref:System.String) sınıfı veya <xref:System.Math?displayProperty=nameWithType> sınıfı.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="bd164-138">Daha iyi bir dize biçimi</span><span class="sxs-lookup"><span data-stu-id="bd164-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd164-139\">C# 6 dizeler dize ve diğer string değerleri oluşturmak için değerlendirilen katıştırılmış ifadeler oluşturmak için yeni sözdizimi içeriyor.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"bd164-140\">Değiştirebileceğiniz `ToString` ve `AllCaps` yöntemleri bu sözdizimini kullanın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"bd164-141\">Konumsal bağımsız değişkenler yerine `{` ve `}`, yazdığınız C# doğrudan ifadeler.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"bd164-142\">Aynı yapabilirsiniz `Main` yöntemi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"bd164-143\">Varolan kodu aşağıdakiyle değiştirin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"bd164-144\">Tek bir değişkende bu ifadelerdeki sınırlı değilsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"bd164-145\">Şimdi yeni bir örnek ile başlayın ve dize ilişkilendirme ile kullanabileceğiniz diğer ifadeler göstermek için değiştirin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"bd164-146\">Etkileşimli pencerede aşağıdaki kodu yapıştırın `Main` yöntemi:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"bd164-147\">Yerel değişken kaldırabilirsiniz `average` ve ilişkilendirilmiş dize ifadesi bir parçası olarak bu hesaplamayı yapmak.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"bd164-148\">Son iki satırı aşağıdaki satırla değiştirin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"bd164-149\">Önceki örnekte çalışan, size, çıktısı bulur `Average` istediğiniz çok daha fazla ondalık basamağı vardır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"bd164-150\">Dize ilişkilendirme sözdizimi tüm biçim dizeleri kullanılabilir daha önce biçimlendirme yöntemleri kullanmayı destekler.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"bd164-151\">Küme ayraçları içinde biçim dizesi belirtin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"bd164-152\">Ekleme bir `:` biçimlendirmek için ifadeyi aşağıdaki:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="bd164-153">Hızlı ve kolay null denetimleri</span><span class="sxs-lookup"><span data-stu-id="bd164-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd164-154\">`?.` (Null koşullu) işleci alan mantığı yazmak için kolaylaştırır `null` dikkate sorunsuz bir şekilde, ek değerleri `if` denetler.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"bd164-155\">Özellik keşfetmek için etkileşimli pencereye denemek için aşağıdaki kodu kopyalayarak başlatın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"bd164-156\">Atar bir <xref:System.NullReferenceException> örneği çalıştırdığınızda.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"bd164-157\">Değişiklik `.` üye erişimi işleci için **null koşullu işleci**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"bd164-158\">Bu değişiklikten sonra hiçbir çıktı yok.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"bd164-159\">Çünkü sonucunu `s?.Length` olduğu bir `int?` olduğunda sonucu `s.Length` olduğu bir `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-159\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"bd164-160\">Bu örnekte, `s?.Length` olduğu `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"bd164-161\">`?.` Döndürür `null` sol işleneni ise `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"bd164-162\">Sağ işlenen türünde bir değer türü ise `?.` işleç türü için boş değer atanabilir bir tür döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"bd164-163\">Ek olarak `?.` kullanabileceğiniz `?[]` dizi ya da dizin oluşturucu erişim için.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"bd164-164\">Etkileşimli pencerede aşağıdaki kodu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"bd164-165\">Birden çok koşullu işleç, tek bir ifadeye birleştirilebilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"bd164-166\">A `null` sol işlenen üretir bir `null` sonucu'nın önlemek kolaylaştıran iç içe varsa üyeleri üyelerine erişmek için yan tümcesi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"bd164-167\">Örneğin, etkileşimli pencerede aşağıdaki kodu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"bd164-168\">Yukarıdaki örnekte kullanılarak basitleştirilebilir **null birleşim işleci** varsayılan bir değer sağlamak için:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"bd164-169\">**Null koşullu işleci** yardımcı olur, çekirdek mantığını yapan kod yazma temizlemek için sorunsuz bir şekilde test ederken `null` değerleri.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="bd164-170">Özel durum filtreleri</span><span class="sxs-lookup"><span data-stu-id="bd164-170">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd164-171\">Özel durum filtreleri bazı koşulunu temel alan bir özel durum yakalamak etkinleştirin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"bd164-172\">Tipik bir kullanım, özel durumları günlüğe kaydeder, ancak hiçbir zaman bu özel durumları işler bir filtresi yöntemi oluşturmaktır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"bd164-173\">Özel Durum Filtresi, Boole ifadesidir `true` olduğunda `catch` yan tümcesi yürütülmelidir, ve `false` ne zaman bir özel durum yakalanmadı tarafından `catch` yan tümcesi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"bd164-174\">Etkileşimli pencerede aşağıdaki kodu deneyin: Özel durum türünü ve ileti konsola kaydeder.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"bd164-175\">Döndürür `false` özel durumun işlenip gösterir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-175\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"bd164-176\">Programın etkileşimli pencerede deneyin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"bd164-177\">Gelen iletiyi görmelisiniz `LogException` yöntemi, varsayılan özel durum iletisi tarafından izlenen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-177\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"bd164-178\">Yalnızca denemek için değiştirme `return false` ifadesine `return true` ve bu yeniden çalıştırın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"bd164-179\">Şimdi, özel durum yakalandı ve program tamamlanana kadar çalışır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"bd164-180\">Özel durumun bir özelliğin hangi eylemin yapılacağını belirlediğinde, günlük kaydı senaryoları dışında özel durum filtreleri en yararlı olabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"bd164-181\">Örneğin, içinde bakabilirsiniz bir <xref:System.AggregateException> ne içerdiği özel durumları olan ve bazı özel duruma bağlı olarak uygun eylemde görmek için.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="bd164-182">Nameof kullanma</span><span class="sxs-lookup"><span data-stu-id="bd164-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd164-183\">`nameof` İşleci herhangi bir değişken, bir türü veya bir türün üye adını döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-183\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"bd164-184\">Nasıl çalıştığını görmek için etkileşimli pencerede aşağıdaki kodu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"bd164-185\">Çıkış değişkeni veya tür adıyla aynıdır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"bd164-186\">Tam olarak nitelenmiş tür adını sağlanan zaman bile (gibi `System.String`) `nameof` işleci nitelenmemiş adı döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"bd164-187\">Bir parametre veya özellik adını bir dizeye dönüştürmek, ihtiyacınız olduğunda bu özellik kullanışlıdır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"bd164-188\">Örnekler oluşturma için bağımsız değişken adını yakalama bir <xref:System.ArgumentNullException> veya <xref:System.ArgumentException>, veya değiştirilen özelliğin adını uygularken yakalama <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="bd164-189">Yeni nesne başlatma söz dizimi</span><span class="sxs-lookup"><span data-stu-id="bd164-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd164-190\">Yeni nesne başlatmayı sözlükleri ve diğer türleri başlatmak kolaylaştıran yöntemleri oluşturmanıza olanak sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-190\">New object initialization enables you to create methods that make it easier to initialize dictionaries, and other types.</span></span> <span data-ttu-id=\"bd164-191\">İle bir sözlük başlatın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-191\">Start with a dictionary.</span></span> <span data-ttu-id=\"bd164-192\">Etkileşimli pencerede aşağıdaki kodu çalıştırın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-192\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"bd164-193\">Bu söz dizimi uygulayan sınıf için genişletebileceğiniz <xref:System.Collections.IEnumerable> ve genel olarak erişilebilir olan `Add` yöntemi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-193\">You can extend this syntax to any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span>  <span data-ttu-id=\"bd164-194\">Aşağıdaki örnek etkileşimli pencerede deneyin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-194\">Try the following sample in the interactive window.</span></span> <span data-ttu-id=\"bd164-195\">Oluşturur bir `Path` uygulayan sınıf `IEnumerable<Point3D>` ve üç bağımsız değişken alan noktaları eklemek için bir yöntemi vardır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-195\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that takes three arguments.</span></span> <span data-ttu-id=\"bd164-196\">Ayrıca, bu öğreticide, gibi ifade gövdeli üyeler ve dize ilişkilendirme zaten gösterilen diğer teknikleri birleştirir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-196\">It also combines other techniques already demonstrated in this tutorial, such as expression-bodied members and string interpolation.</span></span> \n\n<span data-ttu-id=\"bd164-197\">İçinde `Main` , size Initialize yöntemi bir yol noktalarını koordinatları sağlayarak.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-197\">In the `Main` method, you initialize a path by providing coordinates for the points.</span></span> <span data-ttu-id=\"bd164-198\">Bu noktaları toplulukta eklenen `Add` yöntemi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-198\">Those points are added to the collection through the `Add` method.</span></span>\n\n<span data-ttu-id=\"bd164-199\">`Add` Yöntemi, bir genişletme yöntemi de olabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-199\">The `Add` method can also be an extension method.</span></span> <span data-ttu-id=\"bd164-200\">Önceki örnekte şu şekilde güncelleştirebilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-200\">You could update the preceding sample as follows.</span></span> <span data-ttu-id=\"bd164-201\">Bu örnek, korumalı alan sınırlamaları nedeniyle etkileşimli deneyim derlenemeyecektir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-201\">This sample won't compile in the interactive experience because of sandbox limitations.</span></span> <span data-ttu-id=\"bd164-202\">Kendi makinede deneyebilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd164-202\">You can try it on your own machine.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="bd164-203">' Daki yeni özelliklerin İnceleme tamamladınız C# 6.</span><span class="sxs-lookup"><span data-stu-id="bd164-203">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="bd164-204">Şimdi kendiniz uygulamalarınızda deneyebilir.</span><span class="sxs-lookup"><span data-stu-id="bd164-204">Now try them yourself in your applications.</span></span>
