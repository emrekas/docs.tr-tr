### YamlMime:Tutorial
title: <span data-ttu-id="078ba-101">6 C# C# etkileşimli C# öğreticiyi keşfet</span><span class="sxs-lookup"><span data-stu-id="078ba-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: 6 C# ' yı keşfet-tarayıcınızı kullanarak 6 C# ' da yeni özellikleri etkileşimli olarak deneyin
  description: Bu öğreticide, tarayıcınızı kullanarak 6 etkileşimli olarak keşfedebilirsiniz C# . Daha kısa ve okunabilir kod sağlamak için 6 ile C# kullanabileceğiniz yeni deyimleri keşfedebilirsiniz.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: e1414c17cefd0fb31bb782a311e11dbd4cc056bb
  ms.sourcegitcommit: 093571de904fc7979e85ef3c048547d0accb1d8a
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 09/06/2019
  ms.locfileid: "70394097"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="078ba-105">Bu öğretici, kodunuzu derleyip C# çalıştırmanın sonuçlarını yazmak C# ve görüntülemek için tarayıcınızı kullanarak 6 etkileşimli olarak araştırmanıza olanak sağlar.</span><span class="sxs-lookup"><span data-stu-id="078ba-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="078ba-106">Önceki C# uygulamaları daha yeni, daha kısa C# 6 özellikleri kullanacak şekilde değiştiren bir dizi ders içerir.</span><span class="sxs-lookup"><span data-stu-id="078ba-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="078ba-107">Bu makalenin geri kalanında, her bir özelliği keşfetmeye yönelik bir bağlantı ile bu özelliklerin her biri için bir genel bakış sunulmaktadır.</span><span class="sxs-lookup"><span data-stu-id="078ba-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="078ba-108">Salt okuma otomatik özellikleri salt okuma türlerini etkinleştir</span><span class="sxs-lookup"><span data-stu-id="078ba-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"078ba-109\">Otomatik özellik sözdiziminde iki geliştirme özelliği, otomatik özelliklerin daha fazla yerde kullanılmasını kolaylaştırır: salt okunurdur otomatik özellikler ve otomatik özellik başlatıcıları.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"078ba-110\">Bu küçük programı göz önünde bulundurun:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"078ba-111\">Odak moduna girer, önceki kodu C# etkileşimli pencereye kopyalayın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"078ba-112\">Ardından kodun ne yaptığını görmek için *Çalıştır* ' a tıklayın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"078ba-113\">`AllCaps`, özellik değerlerini, büyük harfli dizeyi döndürerek birlikte değiştirmenin istenmeyen yan etkisine sahiptir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"078ba-114\">`Person` Sınıfının yazarı, ve `FirstName` `LastName` için dizelerin salt okunurdur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"078ba-115\">6 C# ile, bu amacı açık hale getirebilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"078ba-116\">`private set` Salt okunurdur otomatik özellik oluşturmak için her iki özellikten de kaldırın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"078ba-117\">Derleyicinin \\*\\* , `FirstName` ve`LastName` özelliklerinin değiştirildiklerinde değiştiği iki konum olduğunu görmek için Çalıştır ' a tıklayın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"078ba-118\">Derleyici hatasını giderecek `AllCaps` yöntemi aşağıdaki kodla değiştirebilirsiniz:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"078ba-119\">Derleyici, bu yeni söz dizimini kullanarak özelliklerin sabit olmasını sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="078ba-120">Otomatik özellikler için yedekleme alanlarını başlatma</span><span class="sxs-lookup"><span data-stu-id="078ba-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"078ba-121\">6 ' da C# yeni sözdizimi otomatik özellikler için başlatıcıları kullanmanıza olanak sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"078ba-122\">Bu, sınıflar yeni özellikleri büyürken daha önemli hale gelir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"078ba-123\">Bir göbek adı özelliği ve sınıfınıza `Person` üç dize alan yeni bir Oluşturucu ekleyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"078ba-124\">`MiddleName` Özelliğindeki atama bir başlatıcıdır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"078ba-125\">İkinci ad için derleyici tarafından oluşturulan yedekleme alanını başlatır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="078ba-126">İfade gövdeli üyeler</span><span class="sxs-lookup"><span data-stu-id="078ba-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="078ba-127">İfade-Bodied Üyeler hafif yöntemler için hafif bir sözdizimi sağlar.</span><span class="sxs-lookup"><span data-stu-id="078ba-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="078ba-128">`Person` Sınıfta iki harika aday vardır.</span><span class="sxs-lookup"><span data-stu-id="078ba-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="078ba-129">Bildirimine `ToString`bakın:</span><span class="sxs-lookup"><span data-stu-id="078ba-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="078ba-130">Bu bildirimini `ToString` aşağıdaki kodla değiştirin:</span><span class="sxs-lookup"><span data-stu-id="078ba-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="078ba-131">`AllCaps` Yöntemiyle aynısını deneyin.</span><span class="sxs-lookup"><span data-stu-id="078ba-131">Try the same with the `AllCaps` method.</span></span> <span data-ttu-id="078ba-132">Bu küçük bir iyileştirmedir, ancak özellikle de Veri Aktarımı nesneleri (DTOs) ve en az davranışa sahip diğer türler için çok daha okunabilir kod oluşturur.</span><span class="sxs-lookup"><span data-stu-id="078ba-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="078ba-133">Tek bir sınıfı içeri aktarma</span><span class="sxs-lookup"><span data-stu-id="078ba-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"078ba-134\">Kodunuzun tamamında sürekli olarak bir sınıf ' statik yöntemleri kullanırsanız (her zaman kodunuzun anlamını her olumsuz bir şekilde).</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"078ba-135\">Sınıf şu anda yalnızca `System` <xref:System.Console?displayProperty=nameWithType> kullanılıyor olsa da ad alanını içeri aktarır. `Person`</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"078ba-136\">`using` İfadeyi aşağıdaki gibi değiştirin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"078ba-137\">Bu ifade, [`string`](xref:System.String) sınıf veya <xref:System.Math?displayProperty=nameWithType> sınıf gibi birçok statik yöntemle tek bir sınıfın kapsamlı bir şekilde kullanılmasını sağlayan daha büyük programlarda daha yararlı hale gelir. `static using`</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="078ba-138">Daha iyi bir dize biçimi</span><span class="sxs-lookup"><span data-stu-id="078ba-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"078ba-139\">C#6 bir dizeden dize oluşturmaya yönelik yeni sözdizimi ve diğer dize değerlerini oluşturmak için değerlendirilen katıştırılmış ifadeleri içerir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"078ba-140\">`ToString` Ve`AllCaps` yöntemlerini bu söz dizimini kullanacak şekilde değiştirebilirsiniz:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"078ba-141\">`{` Ve arasında`}`Konumsal bağımsız değişkenler yerine, ifadeleri doğrudan yazarsınız C# .</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"078ba-142\">`Main` Yönteminde aynı şekilde yapabilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"078ba-143\">Mevcut kodu şu kodla değiştirin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"078ba-144\">Bu İfadelerdeki tek bir değişkenle sınırlı değilsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"078ba-145\">Yeni bir örnekle başlayalım ve dize ilişkilendirimiyle kullanabileceğiniz diğer ifadeleri gösterecek şekilde değiştirin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"078ba-146\">Aşağıdaki kodu `Main` yönteminde etkileşimli pencereye yapıştırın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n<span data-ttu-id=\"078ba-147\">Bu, LINQ kullanan bu nedenle, aşağıdaki using ifadesini etkileşimli pencerenin en üstüne eklemeniz gerekir:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-147\">That uses LINQ, so you'll need to add the following using statement to the top of the interactive window:</span></span>\n\n```csharp\nusing System.Linq;\n```\n\n<span data-ttu-id=\"078ba-148\">Yerel değişkeni `average` kaldırabilir ve bu hesaplamayı, enterpolasyonlu dize ifadesinin bir parçası olarak gerçekleştirebilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-148\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"078ba-149\">Son iki satırı aşağıdaki kodla değiştirin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-149\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"078ba-150\">Önceki örneği çalıştırarak, için `Average` çıkışının istediğiniz daha fazla ondalık basamak olduğunu fark edersiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-150\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"078ba-151\">Dize ilişkilendirme sözdizimi, önceki biçimlendirme yöntemleri kullanılarak kullanılabilir olan tüm biçim dizelerini destekler.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-151\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"078ba-152\">Biçim dizesini küme ayraçları içinde belirtirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-152\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"078ba-153\">Biçimlendirmek için `:` aşağıdaki ifadeyi ekleyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-153\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="078ba-154">Hızlı ve kolay null denetimler</span><span class="sxs-lookup"><span data-stu-id="078ba-154">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"078ba-155\">(Null koşullu) operatörü, ek `if` denetimler olmadan, `null` değerleri hesaba sorunsuz olarak getiren mantığı yazmayı kolaylaştırır. `?.`</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-155\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"078ba-156\">Özelliği araştırmak için, aşağıdaki kodu denemek üzere etkileşimli pencereye kopyalayarak başlayın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-156\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"078ba-157\">Örneği çalıştırdığınızda bir <xref:System.NullReferenceException> oluşturur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-157\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"078ba-158\">Üye erişim işlecini **null koşullu işlece**değiştirin: `.`</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-158\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"078ba-159\">Bu değişiklikten sonra çıkış yok.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-159\">After this change, there's no output.</span></span> <span data-ttu-id=\"078ba-160\">Bunun nedeni `s?.Length` `s.Length` , sonucu bir`int`olduğundaolur. `int?`</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-160\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"078ba-161\">Bu örnekte, `s?.Length`. `null`</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-161\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"078ba-162\">, `?.` Sol `null` işleneni ise`null`döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-162\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"078ba-163\">Sağ işlenenin türü bir değer türü ise, `?.` işleç bu tür için null yapılabilir bir tür döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-163\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"078ba-164\">Ayrıca `?.` , dizi veya Dizin Oluşturucu `?[]` erişimi için kullanabilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-164\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"078ba-165\">Etkileşimli pencerede aşağıdaki kodu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-165\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"078ba-166\">Birden çok koşullu işleç tek bir ifadede birleştirilebilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-166\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"078ba-167\">Sol işlenen bir `null` sonuç üretir, bu da üye üyelerine erişim için iç içe geçmiş yan tümcelerinin kaçınılmasını kolaylaştırır. `null`</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-167\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"078ba-168\">Örneğin, etkileşimli pencerede aşağıdaki kodu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-168\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"078ba-169\">Yukarıdaki örnek, varsayılan bir değer sağlamak için **null birleşim işleci** kullanılarak basitleştirilebilir:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-169\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"078ba-170\">**Null koşullu operatör** , değerler için `null` sorunsuz bir şekilde test ederken çekirdek mantığınızı temizlemenizi sağlayan kodu yazmanızı sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-170\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="078ba-171">Özel durum filtreleri</span><span class="sxs-lookup"><span data-stu-id="078ba-171">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"078ba-172\">Özel durum filtreleri, bir özel durumu bir koşula göre yakalayacak şekilde etkinleştirir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-172\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"078ba-173\">Yaygın olarak kullanılan bir yöntem, özel durumları günlüğe kaydeden ancak bu özel durumları hiçbir şekilde işlemez bir filtre yöntemi oluşturmaktır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-173\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"078ba-174\">`true` Özel durum filtresi, `catch` yan tümcesinin yürütülmesi gereken ve `false` özel durumun `catch` yan tümce tarafından yakalanmadığında oluşan bir Boolean ifadedir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-174\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"078ba-175\">Etkileşimli pencerede aşağıdaki kodu deneyin: Özel durum türünü ve iletisini konsola kaydeder.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-175\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"078ba-176\">Özel durumun `false` işlenemediğini belirten döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-176\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"078ba-177\">Programı etkileşimli pencerede deneyin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-177\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"078ba-178\">`LogException` Yönteminden ve ardından varsayılan özel durum iletisinden iletiyi görmeniz gerekir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-178\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"078ba-179\">Denemek için, `return false` ifadesini olarak `return true` değiştirin ve yeniden çalıştırın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-179\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"078ba-180\">Şimdi özel durum yakalandı ve program tamamlanmak üzere çalışıyor.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-180\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"078ba-181\">Günlüğe kaydetme senaryolarının ötesinde özel durum filtreleri, bir özel durumun özelliği hangi eylemin yapılacağını belirlerken en yararlı olabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-181\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"078ba-182\">Örneğin, içerilen özel durumların ne olduğunu görmek <xref:System.AggregateException> için bir öğesine bakabilir ve belirli özel duruma bağlı olarak uygun bir işlem yapabilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-182\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="078ba-183">NameOf kullanma</span><span class="sxs-lookup"><span data-stu-id="078ba-183">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"078ba-184\">`nameof` İşleci herhangi bir değişkenin, türün veya türün üyesinin adını döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-184\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"078ba-185\">Nasıl çalıştığını görmek için etkileşimli pencerede aşağıdaki kodu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-185\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"078ba-186\">Çıktı, değişkenin veya türün adıyla eşleşir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-186\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"078ba-187\">Tam nitelikli tür adı sağlasanız bile ( `System.String`gibi), `nameof` işleç nitelenmemiş adı döndürür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-187\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"078ba-188\">Bu özellik, bir parametre veya özellik adını bir dizeye dönüştürmeniz gerektiğinde faydalıdır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-188\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"078ba-189\">Örnek olarak, veya <xref:System.ArgumentNullException> <xref:System.ArgumentException>oluştururken bir bağımsız değişkenin adını yakalama veya uygularken <xref:System.ComponentModel.INotifyPropertyChanged>değiştirilen bir özelliğin adını yakalama sayılabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-189\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="078ba-190">Yeni nesne başlatma sözdizimi</span><span class="sxs-lookup"><span data-stu-id="078ba-190">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"078ba-191\">Nesne başlatıcısı sözdizimi artık *dizin oluşturucularının* yanı sıra özellikleri ve alanları başlatmayı desteklemektedir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-191\">Object initializer syntax now supports initializing *indexers* as well as properties and fields.</span></span> <span data-ttu-id=\"078ba-192\">Bu ek, sözlükleri ve diğer türleri başlatmayı kolaylaştırır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-192\">This addition makes it easier to initialize dictionaries and other types.</span></span> <span data-ttu-id=\"078ba-193\">Bir sözlük ile başlayın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-193\">Start with a dictionary.</span></span> <span data-ttu-id=\"078ba-194\">Etkileşimli pencerede aşağıdaki kodu çalıştırın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-194\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"078ba-195\">Bir dizin oluşturucuda bir değer ayarlayan bu sözdizimi, bir dizin oluşturucuda erişilebilir bir set erişimcisine sahip olan herhangi bir tür için kullanılabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-195\">This syntax, which sets a value in an indexer, can be used for any type that has an accessible set accessor on an indexer.</span></span>\n\n<span data-ttu-id=\"078ba-196\">İkinci bir değişiklik, dizileri temsil eden türler için Başlatıcı sözdiziminin etkinleşmesini kolaylaştırır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-196\">A second change makes it easier to enable initializer syntax for types that represent sequences.</span></span> <span data-ttu-id=\"078ba-197\">Koleksiyon başlatıcıları, uygulayan <xref:System.Collections.IEnumerable> ve genel olarak erişilebilen `Add` bir yöntemi olan herhangi bir sınıfta kullanılabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-197\">Collection initializers can be used on any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span> <span data-ttu-id=\"078ba-198\">Bu `Add` Yöntem artık bir genişletme yöntemi olabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-198\">That `Add` method can now be an extension method.</span></span> \n\n<span data-ttu-id=\"078ba-199\">Aşağıdaki örnekte bu söz dizimi için bir senaryo gösterilmektedir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-199\">The following example shows one scenario for this syntax.</span></span> <span data-ttu-id=\"078ba-200\">`Path` Uygulayan`IEnumerable<Point3D>` ve üç bağımsız değişken alan noktaları eklemek için bir yöntemine sahip bir sınıf oluşturur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-200\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that take three arguments.</span></span> <span data-ttu-id=\"078ba-201\">Sınıfı `Extensions` , üç bileşenlerinden yeni `Add` bir nokta eklemek için ek bir yöntem oluşturur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-201\">The `Extensions` class creates an additional `Add` method to add a new point from its three components.</span></span> <span data-ttu-id=\"078ba-202\">Bu örnek, ortamdaki kısıtlamalar nedeniyle şu anda etkileşimli olarak çalışmaz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"078ba-202\">This sample does not currently run interactively due to restrictions in the environment.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="078ba-203">6 ' daki C# yeni özellikleri araştırmayı tamamladınız.</span><span class="sxs-lookup"><span data-stu-id="078ba-203">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="078ba-204">Şimdi bunları uygulamalarınızda kendiniz deneyin.</span><span class="sxs-lookup"><span data-stu-id="078ba-204">Now try them yourself in your applications.</span></span>
