### YamlMime:Tutorial
title: <span data-ttu-id="eaecb-101">Dal ve döngü deyimleriyle koşullu mantık öğrenin</span><span class="sxs-lookup"><span data-stu-id="eaecb-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Dallar ve döngüler - Giriş C# etkileşimli öğretici
  description: Bu öğreticide dallar ve döngüler hakkında bilgi edinmek için tarayıcınızı kullanacaksınız C# etkileşimli olarak. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda çalıştırma ve derleme sonuçları görmek.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="eaecb-105">Liste koleksiyonu</span><span class="sxs-lookup"><span data-stu-id="eaecb-105">The list collection</span></span>
  ms.openlocfilehash: aa6e91af175d1d3a3dcad7086c3a8205d45f438a
  ms.sourcegitcommit: ca2ca60e6f5ea327f164be7ce26d9599e0f85fe4
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/06/2019
  ms.locfileid: "65063854"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="eaecb-106">Bu öğretici size değişkenleri araştıran ve yürütme yolunu Bu değişkenlere göre değiştiren bir kodun nasıl yazılacağını öğretir.</span><span class="sxs-lookup"><span data-stu-id="eaecb-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="eaecb-107">Etkileşimli olarak C# yazmak ve kodunuzu derlerken ve sonuçları görmek için tarayıcınızı kullanacaksınız.</span><span class="sxs-lookup"><span data-stu-id="eaecb-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="eaecb-108">Bu öğreticide, bir dizi, dallanma ve döngü yapıları içindeki keşfedin Ders içeren C#.</span><span class="sxs-lookup"><span data-stu-id="eaecb-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="eaecb-109">Bu dersler size C# dilinin temellerini öğretin.</span><span class="sxs-lookup"><span data-stu-id="eaecb-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="eaecb-110">IF deneyimini kullanarak karar deyimi</span><span class="sxs-lookup"><span data-stu-id="eaecb-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="eaecb-111">Etkileşimli pencerede aşağıdaki kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="eaecb-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="eaecb-112">Bunu yapmak için aşağıdaki kod bloğunu etkileşimli pencereye yazın ve **çalıştırma** düğmesi:</span><span class="sxs-lookup"><span data-stu-id="eaecb-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="eaecb-113">Değiştirin `b` böylece toplam 10'dan küçük:</span><span class="sxs-lookup"><span data-stu-id="eaecb-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="eaecb-114">Tıklayın **çalıştırma** düğmesini tekrar.</span><span class="sxs-lookup"><span data-stu-id="eaecb-114">Click the **Run** button again.</span></span> <span data-ttu-id="eaecb-115">Yanıt 10'dan küçük olduğundan herhangi bir şey yazdırılmaz.</span><span class="sxs-lookup"><span data-stu-id="eaecb-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="eaecb-116">**Koşul** olduğunuz test değer false.</span><span class="sxs-lookup"><span data-stu-id="eaecb-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="eaecb-117">İçin olası dallardan birine yalnızca yazdığınız yürütülecek herhangi bir kodu olmayan bir `if` deyimi: true dalı.</span><span class="sxs-lookup"><span data-stu-id="eaecb-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="eaecb-118">C# (veya herhangi bir programlama dilini) keşfederken, kod yazdığınızda hatalar yapacaksınız.</span><span class="sxs-lookup"><span data-stu-id="eaecb-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="eaecb-119">**Derleyici** bu hataları bulup size bildirir.</span><span class="sxs-lookup"><span data-stu-id="eaecb-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="eaecb-120">Çıktı, hata iletileri içerdiğinde, örnek kod ve neyin düzeltilmesi gerektiğini görmek için etkileşimli pencerede kodu yakından bakın.</span><span class="sxs-lookup"><span data-stu-id="eaecb-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="eaecb-121">Bu alıştırma, C# kodunun yapısını öğrenmenize yardımcı olur.</span><span class="sxs-lookup"><span data-stu-id="eaecb-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="eaecb-122">İlk örnek gücünü gösterir `if` ve Boole türlerini.</span><span class="sxs-lookup"><span data-stu-id="eaecb-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="eaecb-123">A *Boole* iki değerden birine sahip olabilen bir değişkendir: `true` veya `false`.</span><span class="sxs-lookup"><span data-stu-id="eaecb-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="eaecb-124">C# özel bir tür tanımlar `bool` Boole değişkenleri için.</span><span class="sxs-lookup"><span data-stu-id="eaecb-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="eaecb-125">`if` Deyimi değerini denetler bir `bool`.</span><span class="sxs-lookup"><span data-stu-id="eaecb-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="eaecb-126">Değer olduğunda `true`, sonrasındaki deyime `if` yürütür.</span><span class="sxs-lookup"><span data-stu-id="eaecb-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="eaecb-127">Aksi halde atlanır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="eaecb-128">Koşulları kontrol etmek ve bu koşullara göre deyimleri yürütmek için gerçekleştirilen bu işlem son derece etkilidir.</span><span class="sxs-lookup"><span data-stu-id="eaecb-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="eaecb-129">Şimdi daha fazlasını keşfedelim.</span><span class="sxs-lookup"><span data-stu-id="eaecb-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="eaecb-130">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="eaecb-131">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="eaecb-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="eaecb-132">İf ve else koşullarını birlikte</span><span class="sxs-lookup"><span data-stu-id="eaecb-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"eaecb-133\">Hem true hem de false dallarında farklı kod yürütmek için oluşturduğunuz bir `else` dalı, koşul false olduğunda yürütür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"eaecb-134\">Şunu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"eaecb-135\">Deyim `else` anahtar sözcüğü, yalnızca test edilen koşul olduğunda yürütür `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"eaecb-136\">Birleştirme `if` ve `else` Boole koşullarıyla koşullar gereksinim duyduğunuz tüm güç sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"eaecb-137\">Altındaki girinti `if` ve `else` deyimleri, İnsan okuyuculara yöneliktir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"eaecb-138\">C# dili girintileri veya boşlukları olarak önemli kabul etmez.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"eaecb-139\">Deyim `if` veya `else` anahtar sözcüğü, bir koşula göre yürütülecek.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"eaecb-140\">Bu öğreticideki tüm örnekler üzerinde deyimlerin denetim akışına bağlı olarak satır girintilemenin sık kullanılan bir yöntemini uygulayın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"eaecb-141\">Girinti önemli olmadığı için kullanmanız gerekir `{` ve `}` koşullu olarak yürütülen bloğun parçası olarak birden fazla deyim istediğinizde belirtmek için.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"eaecb-142\">C# programcıları genellikle kullanır Bu ayraçları tüm `if` ve `else` yan tümceleri.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"eaecb-143\">Aşağıdaki örnek biraz önce oluşturduğunuz aynıdır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"eaecb-144\">Deneyin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"eaecb-145\">Bu öğreticinin geri kalanını, sonraki küme ayraçlarını, tüm kod örnekleri dahil kabul edilen yöntemleri.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"eaecb-146\">Daha karmaşık koşulları test edebilirsiniz:</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"eaecb-147\">`==` İçin testler sembolü *eşitlik*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"eaecb-148\">Kullanarak `==` eşitliği testi gördüğünüz atamanın'öğesinden ayırır `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"eaecb-149\">`&&` Temsil eder \"ve\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"eaecb-150\">Bu koşulların her ikisi de deyimi true dalında yürütmek için true anlamına gelir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"eaecb-151\">İçine alınmaları koşuluyla her koşullu dalda birden çok deyime sahip bu örnek ayrıca Göster `{` ve `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"eaecb-152\">Ayrıca `||` temsil etmek için \"veya\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"eaecb-153\">Değerleri Değiştir `a`, `b`, ve `c` arasında geçiş `&&` ve `||` keşfetmek için.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"eaecb-154\">Daha fazla bilgiye nasıl elde etmenizi sağlayacak `&&` ve `||` işleçleri çalışır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eaecb-155\">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eaecb-156\">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"eaecb-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="eaecb-157">İşlemleri yinelemek için döngüleri kullanma</span><span class="sxs-lookup"><span data-stu-id="eaecb-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="eaecb-158">Daha büyük programlar oluşturmanın diğer bir önemli kavramı **döngüler**.</span><span class="sxs-lookup"><span data-stu-id="eaecb-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="eaecb-159">Birçok kez yürütülmesini istediğiniz deyimleri yinelemek için döngüleri kullanacaksınız.</span><span class="sxs-lookup"><span data-stu-id="eaecb-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="eaecb-160">Bu kodu etkileşimli pencerede deneyin:</span><span class="sxs-lookup"><span data-stu-id="eaecb-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="eaecb-161">`while` Deyimi bir koşulu denetler ve aşağıdaki deyimi yürütür `while`.</span><span class="sxs-lookup"><span data-stu-id="eaecb-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="eaecb-162">Koşulu kontrol etmeyi ve koşul false olana kadar bu deyimleri yürütmeyi yineler.</span><span class="sxs-lookup"><span data-stu-id="eaecb-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="eaecb-163">Bu örnekte diğer bir yeni işleç yoktur.</span><span class="sxs-lookup"><span data-stu-id="eaecb-163">There's one other new operator in this example.</span></span> <span data-ttu-id="eaecb-164">`++` Sonra `counter` değişkendir **artışı** işleci.</span><span class="sxs-lookup"><span data-stu-id="eaecb-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="eaecb-165">Sayacın değerine 1 ekler ve bu değeri sayaç değişkeninde depolar.</span><span class="sxs-lookup"><span data-stu-id="eaecb-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="eaecb-166">Emin olun `while` döngüsü koşulunun false olarak siz kodu yürütürken gibi.</span><span class="sxs-lookup"><span data-stu-id="eaecb-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="eaecb-167">Aksi halde, oluşturduğunuz bir **sonsuz döngü** programınızı hiçbir zaman sona ereceği.</span><span class="sxs-lookup"><span data-stu-id="eaecb-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="eaecb-168">Kodunuzu çalıştıran altyapı çünkü zaman aşımı ve hiçbir çıktı programınızı görmeyeceğinizden bunu, gösterelim değil.</span><span class="sxs-lookup"><span data-stu-id="eaecb-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="eaecb-169">`while` Döngü, sonraki kodu yürütmeden önce koşulu test eder `while`.</span><span class="sxs-lookup"><span data-stu-id="eaecb-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="eaecb-170">`do` ... `while` döngüsü önce kodu yürütür ve sonra koşulu kontrol eder.</span><span class="sxs-lookup"><span data-stu-id="eaecb-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="eaecb-171">Şöyle görünür:</span><span class="sxs-lookup"><span data-stu-id="eaecb-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="eaecb-172">Bu `do` döngüsü ve önceki `while` döngüsü aynı şekilde çalışır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="eaecb-173">Bir son döngü deyimine geçelim.</span><span class="sxs-lookup"><span data-stu-id="eaecb-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="eaecb-174">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="eaecb-175">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="eaecb-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="eaecb-176">Çalışmak for döngüsü</span><span class="sxs-lookup"><span data-stu-id="eaecb-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="eaecb-177">C# kodunda göreceğiniz başka bir ortak döngü deyimi `for` döngü.</span><span class="sxs-lookup"><span data-stu-id="eaecb-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="eaecb-178">Bu kodu etkileşimli pencerede deneyin:</span><span class="sxs-lookup"><span data-stu-id="eaecb-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="eaecb-179">Bu aynı işlevi görür `while` döngü ve `do` zaten kullandığınız döngü.</span><span class="sxs-lookup"><span data-stu-id="eaecb-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="eaecb-180">`for` Deyimi nasıl çalıştığını denetleyen üç bölümü vardır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="eaecb-181">İlk bölüm **for başlatıcısıdır**: `int counter = 0;` bildiren `counter` Döngü değişkeninin ve bunun başlangıçtaki değerini ayarlar `0`.</span><span class="sxs-lookup"><span data-stu-id="eaecb-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="eaecb-182">Ortadaki bölüm **koşulu**: `counter < 10` bildirir bu `for` döngü sayacının değerini 10'dan az olduğu sürece yürütülmeye devam eder.</span><span class="sxs-lookup"><span data-stu-id="eaecb-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="eaecb-183">Son bölüm ise **yineleyici için**: `counter++` nasıl blok yürütüldükten sonra Döngü değişkeninin değiştirileceğini belirtir `for` deyimi.</span><span class="sxs-lookup"><span data-stu-id="eaecb-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="eaecb-184">Burada, belirtir `counter` bloğun her zaman 1 tarafından arttırılarak.</span><span class="sxs-lookup"><span data-stu-id="eaecb-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="eaecb-185">Bunları kendiniz deneyin.</span><span class="sxs-lookup"><span data-stu-id="eaecb-185">Experiment with these yourself.</span></span> <span data-ttu-id="eaecb-186">Her birini deneyin:</span><span class="sxs-lookup"><span data-stu-id="eaecb-186">Try each of the following:</span></span>


    - <span data-ttu-id="eaecb-187">Farklı bir değerde başlamak için başlatıcıyı değiştirin.</span><span class="sxs-lookup"><span data-stu-id="eaecb-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="eaecb-188">Farklı bir değerde durmak için koşulu değiştirin.</span><span class="sxs-lookup"><span data-stu-id="eaecb-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="eaecb-189">İşiniz bittiğinde yazma adımına geçelim bazı öğrendikleriniz kullanılacak kodunu kendiniz.</span><span class="sxs-lookup"><span data-stu-id="eaecb-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="eaecb-190">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="eaecb-191">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="eaecb-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="eaecb-192">Dalları ve döngüleri birleştirme</span><span class="sxs-lookup"><span data-stu-id="eaecb-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="eaecb-193">Gördüğünüze göre `if` deyimini ve döngü yapılarını C# dil bkz 1 ile 3 ile bölünebilen 20 tüm tamsayıların toplamını bulmak için C# kodu yazacak.</span><span class="sxs-lookup"><span data-stu-id="eaecb-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="eaecb-194">Bazı ipuçları şunlardır:</span><span class="sxs-lookup"><span data-stu-id="eaecb-194">Here are a few hints:</span></span>


    - <span data-ttu-id="eaecb-195">`%` İşleci size bölme işlemindeki kalanı verir.</span><span class="sxs-lookup"><span data-stu-id="eaecb-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="eaecb-196">`if` Deyimi bir sayı toplamı parçası olup olmayacağını görmek için koşul sağlar.</span><span class="sxs-lookup"><span data-stu-id="eaecb-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="eaecb-197">`for` Yinelemenize yardımcı olur, 20'den sayılar 1 için bir dizi adımı yineleyin.</span><span class="sxs-lookup"><span data-stu-id="eaecb-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="eaecb-198">Kendiniz deneyin.</span><span class="sxs-lookup"><span data-stu-id="eaecb-198">Try it yourself.</span></span> <span data-ttu-id="eaecb-199">Ardından olup olmadığınıza bakın.</span><span class="sxs-lookup"><span data-stu-id="eaecb-199">Then check how you did.</span></span> <span data-ttu-id="eaecb-200">İpucu olarak, 63 için bir yanıt almanız gerekir.</span><span class="sxs-lookup"><span data-stu-id="eaecb-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="eaecb-201">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="eaecb-202">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="eaecb-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="eaecb-203">Görevi tamamlama</span><span class="sxs-lookup"><span data-stu-id="eaecb-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="eaecb-204">Bu gibi bir şeyle gündeme mı?</span><span class="sxs-lookup"><span data-stu-id="eaecb-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="eaecb-205">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="eaecb-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="eaecb-206">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="eaecb-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="eaecb-207">Tebrikler!</span><span class="sxs-lookup"><span data-stu-id="eaecb-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="eaecb-208">"Dallar ve döngüler" Etkileşimli öğreticisini tamamladınız.</span><span class="sxs-lookup"><span data-stu-id="eaecb-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="eaecb-209">Tıklayabilirsiniz **liste koleksiyon** etkileşimli bir sonraki öğreticiye başlatmak için aşağıdaki bağlantı ya da ziyaret edebilirsiniz [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) .NET Core SDK'sını indirmek için makinenizde bir proje oluşturun ve kodlama tutun.</span><span class="sxs-lookup"><span data-stu-id="eaecb-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="eaecb-210">"Öğrenme tut" adımı bu öğreticilere geri getirir.</span><span class="sxs-lookup"><span data-stu-id="eaecb-210">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="eaecb-211">Aşağıdaki konulardan Bu kavramlar hakkında daha fazla bilgi edinebilirsiniz:</span><span class="sxs-lookup"><span data-stu-id="eaecb-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="eaecb-212">Varsa ve else deyimi</span><span class="sxs-lookup"><span data-stu-id="eaecb-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="eaecb-213">while deyimi</span><span class="sxs-lookup"><span data-stu-id="eaecb-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="eaecb-214">do deyimi</span><span class="sxs-lookup"><span data-stu-id="eaecb-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="eaecb-215">For deyimi</span><span class="sxs-lookup"><span data-stu-id="eaecb-215">For statement</span></span>](../../language-reference/keywords/for.md)
