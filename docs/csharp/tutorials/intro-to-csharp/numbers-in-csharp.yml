### YamlMime:Tutorial
title: <span data-ttu-id="c3f28-101">İntegral ve kayan nokta numaraları ile düzenlemeC#</span><span class="sxs-lookup"><span data-stu-id="c3f28-101">Manipulate integral and floating point numbers in C#</span></span>
metadata:
  title: İçindeki numaralandırır C# -giriş C# etkileşimli öğretici
  description: Bu öğreticide sayısal türleri hakkında bilgi edinmek için tarayıcınızı kullanacaksınız C# etkileşimli olarak. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda çalıştırma ve derleme sonuçlarını görmek için dağıtacağız.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: <span data-ttu-id="c3f28-105">C# dilinde dallar ve döngüler</span><span class="sxs-lookup"><span data-stu-id="c3f28-105">Branches and loops in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 047914aad8d5d38c1bf5c00f71be50f54b7124f6
  ms.sourcegitcommit: 9b1ac36b6c80176fd4e20eb5bfcbd9d56c3264cf
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 06/28/2019
  ms.locfileid: "67423388"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="c3f28-106">Bu öğretici sayısal türlerle ilgili öğretir C# etkileşimli olarak yazmak için tarayıcınızı kullanarak C# ve derleyerek ve çalıştırarak kodunuzun sonuçlarını göreceksiniz.</span><span class="sxs-lookup"><span data-stu-id="c3f28-106">This tutorial teaches you about the numeric types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="c3f28-107">Bu, bir dizi ve C# matematik işlemlerini inceleyen ders içerir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-107">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="c3f28-108">Bu dersler size C# dilinin temellerini öğretin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="c3f28-109">Tamsayı matematiğini İnceleme</span><span class="sxs-lookup"><span data-stu-id="c3f28-109">Explore integer math</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="c3f28-110">Etkileşimli pencerede aşağıdaki kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="c3f28-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="c3f28-111">Bunu yapmak için aşağıdaki kod bloğunu etkileşimli pencereye yazın ve **çalıştırma** düğmesi:</span><span class="sxs-lookup"><span data-stu-id="c3f28-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    <span data-ttu-id="c3f28-112">Az önce tamsayılarla gerçekleştirilen temel matematik işlemlerinden birini gördünüz.</span><span class="sxs-lookup"><span data-stu-id="c3f28-112">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="c3f28-113">`int` Türü temsil eder bir **tamsayı**, bir pozitif veya negatif tamsayı.</span><span class="sxs-lookup"><span data-stu-id="c3f28-113">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="c3f28-114">Kullandığınız `+` sembol ekleme.</span><span class="sxs-lookup"><span data-stu-id="c3f28-114">You use the `+` symbol for addition.</span></span> <span data-ttu-id="c3f28-115">Tamsayılar için kullanılan diğer matematiksel işlemler şunlardır:</span><span class="sxs-lookup"><span data-stu-id="c3f28-115">Other common mathematical operations for integers include:</span></span>


    - <span data-ttu-id="c3f28-116">`-` çıkarma için</span><span class="sxs-lookup"><span data-stu-id="c3f28-116">`-` for subtraction</span></span>

    - <span data-ttu-id="c3f28-117">`*` çarpma için</span><span class="sxs-lookup"><span data-stu-id="c3f28-117">`*` for multiplication</span></span>

    - <span data-ttu-id="c3f28-118">`/` bölme için</span><span class="sxs-lookup"><span data-stu-id="c3f28-118">`/` for division</span></span>


    > [!TIP]

    > <span data-ttu-id="c3f28-119">Bu etkileşimli öğretici boyunca kendi etkileşimli pencerede yazdığınız kodu değiştirerek keşfedebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="c3f28-119">Throughout this interactive tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="c3f28-120">Bu öğretici, her adımda deneyebileceğiniz örnekler sunar.</span><span class="sxs-lookup"><span data-stu-id="c3f28-120">This tutorial provides examples that you can try at each step.</span></span>


    <span data-ttu-id="c3f28-121">Bu farklı işlemleri keşfederek başlayın.</span><span class="sxs-lookup"><span data-stu-id="c3f28-121">Start by exploring those different operations.</span></span> <span data-ttu-id="c3f28-122">Bu işlemlerden her biriyle denemek için üçüncü satırı değiştirin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-122">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="c3f28-123">Her düzenlemeden sonra tıklayın **çalıştırma** düğmesi.</span><span class="sxs-lookup"><span data-stu-id="c3f28-123">After each edit, click the **Run** button.</span></span>


    <span data-ttu-id="c3f28-124">Çıkarma:</span><span class="sxs-lookup"><span data-stu-id="c3f28-124">Subtraction:</span></span>


    ```csharp

    int c = a - b;

    ```


    <span data-ttu-id="c3f28-125">Çarpma:</span><span class="sxs-lookup"><span data-stu-id="c3f28-125">Multiplication:</span></span>


    ```csharp

    int c = a * b;

    ```


    <span data-ttu-id="c3f28-126">Bölme:</span><span class="sxs-lookup"><span data-stu-id="c3f28-126">Division:</span></span>


    ```csharp

    int c = a / b;

    ```


    <span data-ttu-id="c3f28-127">Dilerseniz aynı satırda birden çok matematik işlemi gerçekleştirerek de deneyebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="c3f28-127">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>


    > [!TIP]

    > <span data-ttu-id="c3f28-128">C# (veya herhangi bir programlama dilini) keşfederken, kod yazdığınızda hatalar yapacaksınız.</span><span class="sxs-lookup"><span data-stu-id="c3f28-128">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="c3f28-129">**Derleyici** bu hataları bulup size bildirir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-129">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="c3f28-130">Çıktı, hata iletileri içerdiğinde, örnek kod ve neyin düzeltilmesi gerektiğini görmek için etkileşimli pencerede kodu yakından bakın.</span><span class="sxs-lookup"><span data-stu-id="c3f28-130">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="c3f28-131">Bu alıştırma, C# kodunun yapısını öğrenmenize yardımcı olur.</span><span class="sxs-lookup"><span data-stu-id="c3f28-131">That exercise will help you learn the structure of C# code.</span></span>


    > [!NOTE]

    > <span data-ttu-id="c3f28-132">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-132">This online coding experience is in preview mode.</span></span> <span data-ttu-id="c3f28-133">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="c3f28-133">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="c3f28-134">İşlem sırasını İnceleme</span><span class="sxs-lookup"><span data-stu-id="c3f28-134">Explore order of operations</span></span>
  durationInMinutes: 7
  content: >
    <span data-ttu-id="c3f28-135">C# dil kuralları Matematikte öğrendiğiniz kurallarla tutarlı farklı matematik işlemlerinin önceliğini tanımlar.</span><span class="sxs-lookup"><span data-stu-id="c3f28-135">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>

    <span data-ttu-id="c3f28-136">Çarpma ve bölme, toplama ve çıkarma öncelik kazanır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-136">Multiplication and division take precedence over addition and subtraction.</span></span>

    <span data-ttu-id="c3f28-137">Bu, etkileşimli pencerede aşağıdaki kodu çalıştırarak keşfedin:</span><span class="sxs-lookup"><span data-stu-id="c3f28-137">Explore that by running the following code in the interactive window:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="c3f28-138">Çıkış, çarpma işleminin toplama işleminden önce gerçekleştiğini gösterir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-138">The output demonstrates that the multiplication is performed before the addition.</span></span>


    <span data-ttu-id="c3f28-139">İşlemi parantez içine ekleyerek farklı bir işlem sırasını zorlayabilir veya önce gerçekleştirilen işlemler, istediğiniz:</span><span class="sxs-lookup"><span data-stu-id="c3f28-139">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="c3f28-140">Birçok farklı işlemi birleştirerek daha fazlasını keşfedin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-140">Explore more by combining many different operations.</span></span> <span data-ttu-id="c3f28-141">Yukarıdaki dördüncü satırı şunun gibi değiştirin:</span><span class="sxs-lookup"><span data-stu-id="c3f28-141">Replace the fourth line above with something like this:</span></span>


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    <span data-ttu-id="c3f28-142">Tamsayılar için ilgi çekici bir davranışı fark etmiş olabilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="c3f28-142">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="c3f28-143">Sonucun ondalık veya kesir bölümü içermesini bile beklediğiniz, Tamsayı bölme her zaman tamsayı sonucu üretir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-143">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>


    <span data-ttu-id="c3f28-144">Bu davranışı görmediyseniz şunları deneyin:</span><span class="sxs-lookup"><span data-stu-id="c3f28-144">If you haven't seen this behavior, try the following:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="c3f28-145">Tıklayın **çalıştırma** yeniden sonuçları görmek için.</span><span class="sxs-lookup"><span data-stu-id="c3f28-145">Click **Run** again to see the results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="c3f28-146">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-146">This online coding experience is in preview mode.</span></span> <span data-ttu-id="c3f28-147">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="c3f28-147">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="c3f28-148">Tamsayı duyarlığını ve sınırlarını İnceleme</span><span class="sxs-lookup"><span data-stu-id="c3f28-148">Explore integer precision and limits</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="c3f28-149">Son örnek, Tamsayı bölme sonucu kestiğini size göstermiştir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-149">That last sample showed you that integer division truncates the result.</span></span>

    <span data-ttu-id="c3f28-150">Alabileceğiniz **kalan** kullanarak **modül** işleci `%` karakter:</span><span class="sxs-lookup"><span data-stu-id="c3f28-150">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    <span data-ttu-id="c3f28-151">C# tamsayı türü diğer bir özelliğiyle matematiksel tamsayılardan farklıdır: `int` türünün alt ve üst sınırları vardır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-151">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="c3f28-152">Bu sınırları görmek için etkileşimli pencerede şu kodu çalıştırın:</span><span class="sxs-lookup"><span data-stu-id="c3f28-152">Run this code in the interactive window to see those limits:</span></span>


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    <span data-ttu-id="c3f28-153">Bir hesaplama, bu sınırları aşan bir değer veriyorsa, sahip olduğunuz bir **underflow** veya **taşma** koşul.</span><span class="sxs-lookup"><span data-stu-id="c3f28-153">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="c3f28-154">Yanıtın bir sınırdan diğerine kaydığı görünür.</span><span class="sxs-lookup"><span data-stu-id="c3f28-154">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="c3f28-155">Şu iki satırı bir örnek görmek için etkileşimli pencereye ekleyin:</span><span class="sxs-lookup"><span data-stu-id="c3f28-155">Add these two lines to the interactive window to see an example:</span></span>


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    <span data-ttu-id="c3f28-156">Yanıt çok az (negatif) tamsayı yakın olduğuna dikkat edin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-156">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="c3f28-157">Aynı olan `min + 2`.</span><span class="sxs-lookup"><span data-stu-id="c3f28-157">It's the same as `min + 2`.</span></span>

    <span data-ttu-id="c3f28-158">Toplama işlemi **taştı** tamsayılar için izin verilen değerler.</span><span class="sxs-lookup"><span data-stu-id="c3f28-158">The addition operation **overflowed** the allowed values for integers.</span></span>

    <span data-ttu-id="c3f28-159">Taşma "etrafında en büyük olası tamsayı değerinden en küçük kaydırıldığı" yanıt oldukça büyük negatif bir sayı olmasıdır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-159">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>


    <span data-ttu-id="c3f28-160">Farklı sınırlar ve ne zaman kullanacağınız duyarlık içeren başka sayısal türler vardır `int` türü, gereksinimlerinizi karşılamadığında.</span><span class="sxs-lookup"><span data-stu-id="c3f28-160">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="c3f28-161">Bir sonraki adımda bunları inceleyelim.</span><span class="sxs-lookup"><span data-stu-id="c3f28-161">Let's explore those next.</span></span>


    > [!NOTE]

    > <span data-ttu-id="c3f28-162">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="c3f28-163">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="c3f28-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="c3f28-164">Çift tür ile çalışma</span><span class="sxs-lookup"><span data-stu-id="c3f28-164">Work with the double type</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="c3f28-165">`double` Sayısal türü temsil eder, çift duyarlıklı kayan nokta sayısı.</span><span class="sxs-lookup"><span data-stu-id="c3f28-165">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="c3f28-166">Bu terimler sizin için yeni olabilir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-166">Those terms may be new to you.</span></span> <span data-ttu-id="c3f28-167">A **kayan nokta** numarası, çok büyük ya da büyüklük açısından küçük olabilen, tamsayı olmayan değerleri temsil etmek kullanışlıdır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-167">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id="c3f28-168">**Çift duyarlıklı** bu numaraları daha fazla duyarlık kullanılarak depolandığı anlamına gelir **tek duyarlıklı**.</span><span class="sxs-lookup"><span data-stu-id="c3f28-168">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="c3f28-169">Modern bilgisayarlarda çift duyarlıklı tek duyarlıklı sayılara kullanmak daha yaygındır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-169">On modern computers, it is more common to use double precision than single precision numbers.</span></span>

    <span data-ttu-id="c3f28-170">Haydi keşfedelim.</span><span class="sxs-lookup"><span data-stu-id="c3f28-170">Let's explore.</span></span> <span data-ttu-id="c3f28-171">Etkileşimli pencerede aşağıdaki kodu deneyin ve sonuca bakın:</span><span class="sxs-lookup"><span data-stu-id="c3f28-171">Try the following code in the interactive window and see the result:</span></span>


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="c3f28-172">Yanıt sayının ondalık kısmını içerdiğine dikkat edin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-172">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="c3f28-173">Çift değerlerle biraz daha karmaşık bir ifadeyi deneyin:</span><span class="sxs-lookup"><span data-stu-id="c3f28-173">Try a slightly more complicated expression with doubles:</span></span>


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="c3f28-174">Çift değerin aralığı, tamsayı değerlerinden çok büyük.</span><span class="sxs-lookup"><span data-stu-id="c3f28-174">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="c3f28-175">Etkileşimli pencerede aşağıdaki kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="c3f28-175">Try the following code in the interactive window:</span></span>


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    <span data-ttu-id="c3f28-176">Bu değerler bilimsel gösterimde yazdırılır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-176">These values are printed out in scientific notation.</span></span> <span data-ttu-id="c3f28-177">Sol tarafındaki sayı `E` katsayıdır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-177">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id="c3f28-178">Sağ taraftaki sayı, 10 'un bir kuvveti üstür.</span><span class="sxs-lookup"><span data-stu-id="c3f28-178">The number to the right is the exponent, as a power of 10.</span></span>


    <span data-ttu-id="c3f28-179">Yalnızca ondalık sayılar gibi C# double yuvarlama hataları olabilir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-179">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="c3f28-180">Bu kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="c3f28-180">Try this code:</span></span>


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    <span data-ttu-id="c3f28-181">Bildiğiniz `0.3` yinelenen tam olarak aynı olup `1/3`.</span><span class="sxs-lookup"><span data-stu-id="c3f28-181">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>


    <span data-ttu-id="c3f28-182">***Sınama***</span><span class="sxs-lookup"><span data-stu-id="c3f28-182">***Challenge***</span></span>


    <span data-ttu-id="c3f28-183">Büyük sayılar, küçük sayılar, çarpma ve bölme kullanarak ile diğer hesaplamaları deneyin `double` türü.</span><span class="sxs-lookup"><span data-stu-id="c3f28-183">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="c3f28-184">Daha karmaşık hesaplamalar deneyin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-184">Try more complicated calculations.</span></span>


    > [!NOTE]

    > <span data-ttu-id="c3f28-185">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="c3f28-186">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="c3f28-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="c3f28-187">Sabit nokta türleriyle çalışma</span><span class="sxs-lookup"><span data-stu-id="c3f28-187">Work with fixed point types</span></span>
  durationInMinutes: 8
  content: >
    <span data-ttu-id="c3f28-188">C# dilinde temel sayısal türleri gördünüz: tamsayılar ve çiftler.</span><span class="sxs-lookup"><span data-stu-id="c3f28-188">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="c3f28-189">Bilgi edinmek için bir türü vardır: `decimal` türü.</span><span class="sxs-lookup"><span data-stu-id="c3f28-189">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="c3f28-190">`decimal` Türünde daha küçük bir aralığa ancak daha fazla duyarlığa `double`.</span><span class="sxs-lookup"><span data-stu-id="c3f28-190">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id="c3f28-191">Terim **sabit nokta** Ondalık ayırıcının (veya ikili noktasının) hareket etmediği anlamına gelir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-191">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="c3f28-192">Bir göz atalım:</span><span class="sxs-lookup"><span data-stu-id="c3f28-192">Let's take a look:</span></span>


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    <span data-ttu-id="c3f28-193">Aralık değerinden küçük olduğunu fark `double` türü.</span><span class="sxs-lookup"><span data-stu-id="c3f28-193">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="c3f28-194">Aşağıdaki kodu deneyerek ondalık türünde daha fazla duyarlık görebilirsiniz:</span><span class="sxs-lookup"><span data-stu-id="c3f28-194">You can see the greater precision with the decimal type by trying the following code:</span></span>


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    <span data-ttu-id="c3f28-195">`M` Numaralarda sonekidir nasıl bir sabit kullanması gerektiğini belirten `decimal` türü.</span><span class="sxs-lookup"><span data-stu-id="c3f28-195">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>


    <span data-ttu-id="c3f28-196">Ondalık türünün kullanıldığı Matematikte, ondalık noktanın sağındaki daha fazla rakam olduğuna dikkat edin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-196">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span>


    <span data-ttu-id="c3f28-197">***Sınama***</span><span class="sxs-lookup"><span data-stu-id="c3f28-197">***Challenge***</span></span>


    <span data-ttu-id="c3f28-198">Farklı sayısal türleri gördüğünüze göre çapı 2,50 santimetre olan bir dairenin alanını hesaplayan kodu yazın.</span><span class="sxs-lookup"><span data-stu-id="c3f28-198">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id="c3f28-199">Unutmayın PI sayısı ile çarpılan bir dairenin alanının kare RADIUS olduğunu.</span><span class="sxs-lookup"><span data-stu-id="c3f28-199">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="c3f28-200">İpucu: .NET, PI sayısı için bir sabit içeriyor <xref:System.Math.PI?displayProperty=nameWithType> , bu değer için kullanabilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="c3f28-200">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span>


    > [!NOTE]

    > <span data-ttu-id="c3f28-201">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="c3f28-202">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="c3f28-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>


    <span data-ttu-id="c3f28-203">19 ile 20 arasında bir yanıt almanız gerekir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-203">You should get an answer between 19 and 20.</span></span>
- title: <span data-ttu-id="c3f28-204">Görevi tamamlama</span><span class="sxs-lookup"><span data-stu-id="c3f28-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="c3f28-205">Bu gibi bir şeyle gündeme mı?</span><span class="sxs-lookup"><span data-stu-id="c3f28-205">Did you come up with something like this?</span></span>


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    <span data-ttu-id="c3f28-206">Dilerseniz diğer formüllerden deneyin.</span><span class="sxs-lookup"><span data-stu-id="c3f28-206">Try some other formulas if you'd like.</span></span>


    > [!NOTE]

    > <span data-ttu-id="c3f28-207">Bu çevrimiçi kodlama deneyimi Önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="c3f28-207">This online coding experience is in preview mode.</span></span> <span data-ttu-id="c3f28-208">Sorunlarla karşılaşırsanız, Lütfen bunları rapor [dotnet/try deposunda](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="c3f28-208">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="c3f28-209">Tamamladınız "içindeki numaralandırır C#" etkileşimli bir öğretici.</span><span class="sxs-lookup"><span data-stu-id="c3f28-209">You've completed the "Numbers in C#" interactive tutorial.</span></span> <span data-ttu-id="c3f28-210">Tıklayabilirsiniz **dallar ve döngüler** etkileşimli bir sonraki öğreticiye başlatmak için aşağıdaki bağlantı ya da ziyaret edebilirsiniz [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) .NET Core SDK'sını indirmek için makinenizde bir proje oluşturun ve kodlama tutun.</span><span class="sxs-lookup"><span data-stu-id="c3f28-210">You can click the **Branches and Loops** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="c3f28-211">"Öğrenme tut" adımı bu öğreticilere geri getirir.</span><span class="sxs-lookup"><span data-stu-id="c3f28-211">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="c3f28-212">Aşağıdaki konularda C# dilinde sayılar hakkında daha fazla bilgi edinebilirsiniz:</span><span class="sxs-lookup"><span data-stu-id="c3f28-212">You can learn more about numbers in C# in the following topics:</span></span>


    - [<span data-ttu-id="c3f28-213">Tam sayı türleri</span><span class="sxs-lookup"><span data-stu-id="c3f28-213">Integral types</span></span>](../../language-reference/builtin-types/integral-numeric-types.md)

    - [<span data-ttu-id="c3f28-214">Kayan Nokta Türleri Tablosu</span><span class="sxs-lookup"><span data-stu-id="c3f28-214">Floating-Point Types Table</span></span>](../../language-reference/keywords/floating-point-types-table.md)

    - [<span data-ttu-id="c3f28-215">Yerleşik Türler Tablosu</span><span class="sxs-lookup"><span data-stu-id="c3f28-215">Built-In Types Table</span></span>](../../language-reference/keywords/built-in-types-table.md)

    - [<span data-ttu-id="c3f28-216">Örtük Sayısal Dönüştürmeler Tablosu</span><span class="sxs-lookup"><span data-stu-id="c3f28-216">Implicit Numeric Conversions Table</span></span>](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [<span data-ttu-id="c3f28-217">Açık Sayısal Dönüştürmeler Tablosu</span><span class="sxs-lookup"><span data-stu-id="c3f28-217">Explicit Numeric Conversions Table</span></span>](../../language-reference/keywords/explicit-numeric-conversions-table.md)
